#!/bin/bash

# Function to check and install missing programs
install_if_missing() {
    local pkg_manager=$1
    local package=$2

    if ! command -v $package &>/dev/null; then
        echo "Installing $package..."
        case $pkg_manager in
        pacman)
            sudo pacman -S --noconfirm $package
            ;;
        apt)
            sudo apt-get install -y $package
            ;;
        dnf)
            sudo dnf install -y $package
            ;;
        *)
            echo "Unsupported package manager: $pkg_manager"
            exit 1
            ;;
        esac
    fi
}

# Determine package manager
if command -v pacman &>/dev/null; then
    pkg_manager="pacman"
elif command -v apt-get &>/dev/null; then
    pkg_manager="apt"
elif command -v dnf &>/dev/null; then
    pkg_manager="dnf"
else
    echo "Unsupported distribution"
    exit 1
fi

# Check and install required packages
install_if_missing $pkg_manager pv
install_if_missing $pkg_manager flatpak
install_if_missing $pkg_manager docker

if [ "$pkg_manager" == "pacman" ]; then
    install_if_missing $pkg_manager yay
fi

# Check and install snapd if missing
if ! command -v snap &>/dev/null; then
    install_if_missing $pkg_manager snapd
    sudo systemctl start snapd
    sudo systemctl enable snapd
fi

# Check and install AppImageUpdate
if ! command -v appimageupdatetool &>/dev/null; then
    echo "Installing AppImageUpdate..."
    wget -O ~/AppImageUpdate-x86_64.AppImage https://github.com/AppImage/AppImageUpdate/releases/download/continuous/AppImageUpdate-x86_64.AppImage
    chmod +x ~/AppImageUpdate-x86_64.AppImage
    sudo mv ~/AppImageUpdate-x86_64.AppImage /usr/local/bin/appimageupdatetool
fi

# Function to show a loading bar
run_with_loading_bar() {
    local cmd="$1"
    echo "$cmd" | pv -pt -i 0.5 -w 80 -N "$2" >/dev/null
    eval "$cmd"
}

# Function to measure execution time
measure_time() {
    local start_time=$(date +%s)
    $@
    local end_time=$(date +%s)
    local elapsed=$((end_time - start_time))
    echo "Time taken: $elapsed seconds"
    return $elapsed
}

# Start the update process
echo "Starting the update process..."
total_start_time=$(date +%s)

# Update system with the appropriate package manager
case $pkg_manager in
pacman)
    echo "Updating system with pacman..."
    measure_time run_with_loading_bar "sudo pacman -Syu --noconfirm" "Pacman Update"
    pacman_diff=$(checkupdates | wc -l)
    echo "Pacman updates: $pacman_diff packages"
    ;;
apt)
    echo "Updating system with apt-get..."
    measure_time run_with_loading_bar "sudo apt-get update && sudo apt-get upgrade -y" "APT Update"
    apt_diff=$(apt list --upgradable 2>/dev/null | grep -v Listing | wc -l)
    echo "APT updates: $apt_diff packages"
    ;;
dnf)
    echo "Updating system with dnf..."
    measure_time run_with_loading_bar "sudo dnf update -y" "DNF Update"
    dnf_diff=$(dnf check-update | wc -l)
    echo "DNF updates: $dnf_diff packages"
    ;;
esac

# Update AUR packages with yay (only for Arch)
if [ "$pkg_manager" == "pacman" ]; then
    echo "Updating AUR packages with yay..."
    measure_time run_with_loading_bar "yay -Syu --noconfirm" "AUR Update"
    aur_diff=$(yay -Qu | wc -l)
    echo "AUR updates: $aur_diff packages"
fi

# Update snaps
echo "Updating snaps..."
measure_time run_with_loading_bar "sudo snap refresh" "Snap Update"
snap_diff=$(snap refresh --list | wc -l)
echo "Snap updates: $snap_diff packages"

# Update flatpak
echo "Updating flatpak packages..."
measure_time run_with_loading_bar "flatpak update -y" "Flatpak Update"
flatpak_diff=$(flatpak update --appstream | wc -l)
echo "Flatpak updates: $flatpak_diff packages"

# Update Docker images
echo "Updating Docker images..."
measure_time run_with_loading_bar "docker images --format '{{.Repository}}:{{.Tag}}' | grep -v '<none>:<none>' | xargs -L1 docker pull" "Docker Update"
docker_diff=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep -v '<none>:<none>' | wc -l)
echo "Docker images updated: $docker_diff images"

# AppImage updates using AppImageUpdate
echo "Updating AppImages..."
appimage_dir=~/Applications
appimage_count=0
for appimage in $(find $appimage_dir -name "*.AppImage"); do
    echo "Updating $appimage..."
    measure_time run_with_loading_bar "appimageupdatetool $appimage" "AppImage Update"
    ((appimage_count++))
done

echo "AppImages updated: $appimage_count updates"

total_updates=$(($pacman_diff + $aur_diff + $snap_diff + $flatpak_diff + $docker_diff + $appimage_count))
echo "Total updates: $total_updates"

total_end_time=$(date +%s)
total_elapsed=$((total_end_time - total_start_time))
echo "Total time taken for the update process: $total_elapsed seconds"

echo "Update process completed."

