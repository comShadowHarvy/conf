#!/usr/bin/env bash
# ============================================================================
#
#  Fully Restored & Reorganized Shell Aliases and Functions
#
# ============================================================================

# ----------------------------------------------------------------------------
#  General & Navigation Functions
# ----------------------------------------------------------------------------

# Create a directory and cd into it
mkcd() {
  [[ -z "$1" ]] && { echo "Usage: mkcd <directory>"; return 1; }
  mkdir -p "$1" && cd "$1" || return 1
}

# Use fzf to interactively cd into a subdirectory
cdf() {
  local cmd=("find . -maxdepth 2 -type d")
  (( ${+commands[fd]} )) && cmd=("fd --type d --max-depth 2")
  local dir
  dir=$(eval "$cmd" | fzf --height 20% --reverse --prompt="Select directory > ")
  [[ -n "$dir" ]] && cd "$dir"
}

# Go up a specified number of directories
up() {
  local d=""
  local limit="${1:-1}"
  [[ ! "$limit" =~ ^[0-9]+$ || "$limit" -eq 0 ]] && limit=1
  for ((i = 1; i <= limit; i++)); do d="../$d"; done
  cd "$d" || echo "Error: Couldn't go up $limit level(s)."
}

# Direct navigation aliases
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ~="cd ~"
alias dl="cd ~/Downloads"
alias dt="cd ~/Desktop"
alias p="cd ~/projects"
alias doc="cd ~/Documents"

# ----------------------------------------------------------------------------
#  File & Directory Management
# ----------------------------------------------------------------------------

# Use modern, feature-rich tools if available, with robust fallbacks
if command -v eza >/dev/null 2>&1; then
  alias ls='eza -a --icons'
  alias ll='eza -al --icons --git'
  alias lt='eza -a --tree --level=1 --icons'
  alias la='eza -la --icons'
  alias lm='eza -la --sort=modified --icons'
  alias lS='eza -la --sort=size --icons'
else
  # Colorized ls fallbacks
  alias ls="ls --color=auto"
  alias ll="ls -la --color=auto"
  alias l.="ls -d .* --color=auto"
  alias la="ls -la --color=auto"
  alias lm="ls -la --color=auto -t"
  alias lS="ls -la --color=auto -S"
fi

# Use rsync for cp/mv to get progress bars
alias cp='rsync -avhP --info=progress2'
alias mv='rsync -avhP --info=progress2 --remove-source-files'
alias mkdir='mkdir -pv'

# Use fd instead of find if it exists
command -v fd >/dev/null 2>&1 && alias findr='fd'

# Find text in files, preferring ripgrep (rg)
ftext() {
  [[ $# -eq 0 ]] && { echo "Usage: ftext <pattern> [path]"; return 1; }
  local pattern=$1
  local path=${2:-.}
  if command -v rg &>/dev/null; then
    rg --color=always --line-number --no-heading --smart-case "$pattern" "$path"
  else
    grep -rni --color=always "$pattern" "$path"
  fi
}

# Find directories by name, preferring fd
fdir() {
  [[ -z "$1" ]] && { echo "Usage: fdir <pattern> [depth]"; return 1; }
  local pattern=$1
  local depth=${2:-3}
  if command -v fd &>/dev/null; then
    fd --type d --max-depth "$depth" "$pattern"
  else
    find . -maxdepth "$depth" -type d -name "*$pattern*"
  fi
}

# Extract almost any archive format
extract() {
  if [[ -z "$1" || "$1" == "--help" ]]; then
    echo "Usage: extract <archive_file>"
    echo "Extracts a wide variety of archive formats."
    return 0
  fi
  local file="$1"
  if [[ ! -f "$file" ]]; then
    echo "Error: File '$file' not found."
    return 1
  fi
  echo "Extracting '$file'..."
  case "$file" in
    *.tar.bz2|*.tbz2|*.tbz) tar xjf "$file" ;;
    *.tar.gz|*.tgz)        tar xzf "$file" ;;
    *.tar.xz|*.txz)        tar xJf "$file" ;;
    *.tar|*.cbt)           tar xf "$file"  ;;
    *.zip|*.cbz|*.epub)    unzip "$file"   ;;
    *.rar|*.cbr)           unrar x "$file" ;;
    *.7z|*.cb7|*.chm|*.deb|*.iso|*.rpm|*.udf|*.wim) 7z x "$file" ;;
    *.gz)                  gunzip "$file"  ;;
    *.bz2)                 bunzip2 "$file" ;;
    *.xz|*.tlz)            unxz "$file"    ;;
    *.lzma)                unlzma "$file"  ;;
    *.Z)                   uncompress "$file" ;;
    *.exe)                 cabextract "$file" ;;
    *.cpio)                cpio -id < "$file" ;;
    *.ace|*.cba)           unace x "$file" ;;
    *)
      echo "Error: Unsupported file type: '$file'"
      return 1
      ;;
  esac
}

# Extract all archives in the current directory into their own subdirectories
extract-all() {
  find . -maxdepth 1 -type f | while read -r archive_path; do
    case "$archive_path" in
      *.tar.bz2|*.tbz2|*.tbz|*.tar.gz|*.tgz|*.tar.xz|*.txz|*.tar|*.cbt|*.zip|*.cbz|*.epub|*.rar|*.cbr|*.7z|*.cb7|*.chm|*.deb|*.iso|*.rpm|*.udf|*.wim|*.gz|*.bz2|*.xz|*.tlz|*.lzma|*.Z|*.exe|*.cpio|*.ace|*.cba)
        local filename=$(basename "$archive_path")
        local dest_dir=$(echo "$filename" | sed -E 's/(\.tar\.(gz|bz2|xz|lzma|Z)|\.t(gz|bz2|xz))?$//' | sed -E 's/\.[^.]+$//')
        echo "--- Extracting $filename to $dest_dir/ ---"
        extract "$archive_path" "$dest_dir"
        ;;
      *) ;;
    esac
  done
  echo "--- All archives processed. ---"
}


# ----------------------------------------------------------------------------
#  Yazi File Manager
# ----------------------------------------------------------------------------
alias y='yazi'
alias ya='yazi .'
alias yh='yazi ~'
alias yd='yazi ~/Downloads'
cdz() { [[ -z "$1" ]] && yazi . || (cd "$1" && yazi .); }
ycd() {
  local tmp cwd
  tmp="$(mktemp -t "yazi-cwd.XXXXX")"
  yazi --cwd-file="$tmp" "$@"
  if cwd="$(cat -- "$tmp")" && [[ -n "$cwd" && "$cwd" != "$PWD" ]]; then
    cd -- "$cwd" || return 1
  fi
  rm -f -- "$tmp"
}

# ----------------------------------------------------------------------------
#  System Management
# ----------------------------------------------------------------------------

alias h='history'
alias j='jobs -l'
alias reload='exec ${SHELL} -l'
alias :q='exit'
alias please="sudo !!"

# System info and resource usage
alias psa='ps auxf'
alias psgrep="ps aux | grep -v grep | grep -i -e VSZ -e"
alias psmem='ps auxf | sort -nr -k 4 | head -10'
alias pscpu='ps auxf | sort -nr -k 3 | head -10'
alias meminfo='free -m -l -t'
alias cpuinfo='lscpu'
alias df='df -h'
alias du='du -h'
alias syswatch='watch -n2 "free -h; echo; df -h -T /"'
alias tempcheck='sensors | grep -i "core"'

dirsummary() {
  local dir=${1:-.}
  echo "📂 Directory Summary for: $(realpath "$dir")"
  echo "───────────────────────────────────────"
  {
    files=$(find "$dir" -type f | wc -l)
    dirs=$(find "$dir" -type d | wc -l)
  } &
  size=$(du -sh "$dir" | cut -f1)
  wait
  echo "📊 Stats:"
  echo "  Files: $files, Directories: $dirs, Total Size: $size"
  echo -e "\n📑 Top 5 File Types:"
  find "$dir" -type f -not -path '*/.*' -exec file {} + | sed 's/.*: //' | sort | uniq -c | sort -nr | head -5
  echo -e "\n📁 Top 5 Largest Subdirectories:"
  du -h --max-depth=1 "$dir" | sort -hr | head -5
}

sysinfo() {
  echo "📊 System Information:"
  echo "  - Kernel: $(uname -r)"
  echo "  - Uptime: $(uptime -p)"
  command -v free >/dev/null && echo "  - Memory: $(free -h | awk '/^Mem:/ {print $3 " / " $2}')"
  command -v df >/dev/null && echo "  - Disk: $(df -h / | awk 'NR==2 {print $3 " / " $2 " (" $5 " used)"}')"
}

# ----------------------------------------------------------------------------
#  Package Management (Arch Linux)
# ----------------------------------------------------------------------------

# Pacman
alias pacsyu='sudo pacman -Syu'
alias pacsyyu='sudo pacman -Syyu'
alias pacs='sudo pacman -S'
alias pacr='sudo pacman -Rns'
alias pacq='pacman -Q'
alias pacqs='pacman -Qs'
alias pacss='pacman -Ss'
alias pacsi='pacman -Si'
alias pacqi='pacman -Qi'
alias pacqo='pacman -Qo'
alias pacmanlock='sudo rm /var/lib/pacman/db.lck' # Use with caution
alias paccleancache='sudo pacman -Sc'
alias paccleancacheall='sudo pacman -Scc' # Use with caution

# Paru (AUR Helper)
alias parsua='paru -Sua --noconfirm'
alias parsyu='paru -Syu --noconfirm'
alias pars='paru -S'
alias parr='paru -Rns'
alias parq='paru -Q'
alias parqs='paru -Qs'
alias parss='paru -Ss'
alias parsi='paru -Si'
alias parqi='paru -Qi'

# Orphans
alias listorphan='pacman -Qtdq'
alias orphan='sudo pacman -Rns $(pacman -Qtdq)' # Use with caution

# Reflector (Mirrorlist)
alias mirror="sudo reflector --country Canada --country US --age 6 --sort rate --save /etc/pacman.d/mirrorlist"
alias mirrord="sudo reflector --latest 50 --number 20 --sort delay --save /etc/pacman.d/mirrorlist"
alias mirrors="sudo reflector --latest 50 --number 20 --sort score --save /etc/pacman.d/mirrorlist"
alias mirrora="sudo reflector --latest 50 --number 20 --sort age --save /etc/pacman.d/mirrorlist"

# ----------------------------------------------------------------------------
#  Networking
# ----------------------------------------------------------------------------

alias ports="netstat -tulanp"
alias lsport='sudo lsof -i'
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="hostname -I | awk '{print \$1}'"
alias vnstat="vnstat -i eth1"

# Nmap presets
alias nmap_open_ports="nmap --open"
alias nmap_list_interfaces="nmap --iflist"
alias nmap_slow="sudo nmap -sS -v -T1"
alias nmap_fin="sudo nmap -sF -v"
alias nmap_fast="nmap -F -T5 --version-light --top-ports 300"
alias nmap_full="sudo nmap -sS -T4 -PE -PP -PS80,443 -PY -g 53 -A -p1-65535 -v"

# Simple HTTP server for sharing
share() {
  [[ -z "$1" ]] && { echo "Usage: share <file_or_directory> [port]"; return 1; }
  [[ ! -e "$1" ]] && { echo "Error: '$1' not found."; return 1; }
  local port=${2:-8000}
  local ip_addr=$(hostname -I | awk '{print $1}')
  local temp_dir=""
  cleanup() { [[ -n "$temp_dir" ]] && rm -rf "$temp_dir"; echo -e "\nServer stopped."; }
  trap cleanup INT TERM EXIT
  if [[ -d "$1" ]]; then
    echo "Sharing directory at http://$ip_addr:$port/"
    (cd "$1" && python3 -m http.server "$port")
  else
    temp_dir=$(mktemp -d)
    cp "$1" "$temp_dir/"
    echo "Sharing file at http://$ip_addr:$port/$(basename "$1")"
    (cd "$temp_dir" && python3 -m http.server "$port")
  fi
}

# ----------------------------------------------------------------------------
#  Media & Downloads
# ----------------------------------------------------------------------------

alias ytmp3="youtube-dl --extract-audio --audio-format mp3"
alias ytmp4="youtube-dl -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4'"
alias wget='wget --no-hsts -c'
alias get='wget -m -np -c -R "index.html*"'
alias playmp3='for i in *.mp3; do mplayer "$i"; done'
alias music="mplayer --shuffle *"

# ----------------------------------------------------------------------------
#  Git & Development
# ----------------------------------------------------------------------------

alias gitstatus="git status -s"
alias gita="git add -A"
alias gitcm="git commit -m"
alias gitp="git push"
alias gitpl="git pull"
alias gitf="git fetch"
alias gits="git stash"
alias gitsp="git stash pop"
alias gitb="git branch"
alias gitco="git checkout"
alias gitcb="git checkout -b"
alias gri="git rebase -i"
alias glog="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias gitclean="git clean -fd"
alias gc="git clone"
alias config="/usr/bin/git --git-dir=$HOME/dotfiles --work-tree=$HOME"

gcc() {
  [[ -z "$1" ]] && { echo "Usage: gcc <repo_url> [dir_name]"; return 1; }
  local repo_url="$1"
  local dir_name=${2:-$(basename "$repo_url" .git)}
  git clone "$repo_url" "$dir_name" && cd "$dir_name" || return 1
}

quickgit() {
  [[ -z "$1" ]] && { echo "Usage: quickgit <commit message>"; return 1; }
  git rev-parse --is-inside-work-tree &>/dev/null || { echo "Error: Not a git repository."; return 1; }
  echo "Staging all changes..."
  git add . || return 1
  echo "Committing with message: $*"
  git commit -m "$*" || return 1
  if git remote | grep -q .; then
    echo "Pushing to remote..."
    git push || echo "Warning: Push failed, but commit was successful."
  else
    echo "No remote configured. Skipping push."
  fi
}

gitupdate() {
  git rev-parse --is-inside-work-tree &>/dev/null || { echo "Error: Not a git repository."; return 1; }
  local current_branch=$(git rev-parse --abbrev-ref HEAD)
  local stashed=false
  cleanup() { $stashed && echo "Applying stashed changes..." && git stash pop; }
  trap cleanup ERR EXIT
  ! git diff --quiet && echo "Stashing local changes..." && git stash && stashed=true
  echo "Fetching latest changes for branch '$current_branch'..."
  git fetch || return 1
  if git rev-parse --verify origin/$current_branch >/dev/null 2>&1; then
    echo "Rebasing on origin/$current_branch..."
    git rebase origin/$current_branch || { echo "Error: Rebase failed."; return 1; }
  fi
  echo "Update complete!"
}

# ----------------------------------------------------------------------------
#  Tmux Shortcuts
# ----------------------------------------------------------------------------

alias ta="tmux attach -t"
alias ts="tmux new-session -s"
alias tl="tmux list-sessions"
alias tk="tmux kill-session -t"
alias tn="tmux new -s"
alias tsw="tmux switch-client -t"

# ----------------------------------------------------------------------------
#  Shell, Apps, & Custom Commands
# ----------------------------------------------------------------------------

# Edit shell config files
alias reload-zsh="source \${ZDOTDIR:-\$HOME}/.zshrc"
alias edit-zsh="nvim \${ZDOTDIR:-\$HOME}/.zshrc"
alias edit-aliases="nvim \${ZDOTDIR:-\$HOME}/.aliases"

# Default Applications
alias browser="google-chrome-stable"
command -v flatpak >/dev/null 2>&1 && {
  alias vlc="flatpak run org.videolan.VLC"
  alias spotify="flatpak run com.spotify.Client"
  alias discord="flatpak run com.discordapp.Discord"
  alias teams="flatpak run com.microsoft.Teams"
  alias code="flatpak run com.visualstudio.code"
  alias studio="flatpak run com.visualstudio.code"
}

# Enhanced man pages
if command -v batcat >/dev/null 2>&1; then
  export MANPAGER="sh -c 'col -bx | batcat -l man -p'"
elif command -v bat >/dev/null 2>&1; then
  export MANPAGER="sh -c 'col -bx | bat -l man -p'"
fi

# Installer shortcuts
alias christitus='curl -fsSL christitus.com/linux | sh'
alias christitusdev='curl -fsSL https://christitus.com/linuxdev | sh'

pkg-install() {
  [[ -z "$1" ]] && { echo "Usage: pkg-install <package> [--verbose]"; return 1; }
  [[ -f ~/install.sh ]] && ~/install.sh "$@" || { echo "Error: install.sh not found."; return 1; }
}

# Misc Tools & Fun
command -v lolcat >/dev/null 2>&1 && {
  alias neofetch="neofetch | lolcat"
  alias loo="| lolcat"
}
alias lweather="ansiweather -l Palmerston,Ontario"
alias week="date +%V"
alias now="date +%T"
alias today='date "+%Y-%m-%d"'
alias tb="nc termbin.com 9999"
alias bc="bc -l"
alias sha1="openssl sha1"
alias sha256="openssl sha256"
alias md5="openssl md5"
alias flushmcd='echo "flush_all" | nc 10.10.27.11 11211'
alias jctl="journalctl -p 3 -xb"
alias gpg-check="gpg2 --keyserver-options auto-key-retrieve --verify"
alias gpg-retrieve="gpg2 --keyserver-options auto-key-retrieve --receive-keys"

# AI/Fabric Tools
ytt() {
  [[ -z "$1" ]] && { echo "Usage: ytt <youtube_link>"; return 1; }
  command -v yt &>/dev/null && command -v fabric &>/dev/null || { echo "Error: 'yt' and 'fabric' must be installed."; return 1; }
  yt --transcript "$1" | fabric --stream --pattern extract_wisdom
}
alias gemini_cli='npx https://github.com/google-gemini/gemini-cli'
alias run_qwen3='ollama run qwen3:8b'
alias run_llama3='ollama run llama3:8b'

# Password generator
genpass() {
  local length=${1:-16}
  [[ ! "$length" =~ ^[0-9]+$ || "$length" -lt 8 ]] && { echo "Specify a valid length (min 8)"; return 1; }
  tr -dc 'A-Za-z0-9!@#$%^&*()-_=+' < /dev/urandom | head -c "$length" ; echo
}
