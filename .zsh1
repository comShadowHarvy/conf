# =======================================
# Environment and Antigen Initialization
# =======================================
source ~/antigen.zsh
antigen init ~/.antigenrc

# =======================================
# History Configuration
# =======================================
HISTFILE=~/.histfile
export HISTSIZE=10000000
export SAVEHIST=10000000
setopt BANG_HIST EXTENDED_HISTORY INC_APPEND_HISTORY SHARE_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST HIST_IGNORE_DUPS HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE HIST_SAVE_NO_DUPS HIST_REDUCE_BLANKS HIST_BEEP

# =======================================
# Keybindings
# =======================================
autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-x\C-e' edit-command-line

autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
bindkey ' ' magic-space
bindkey "${terminfo[kcuu1]}" up-line-or-beginning-search
bindkey "${terminfo[kcud1]}" down-line-or-beginning-search

# =======================================
# Aliases
# =======================================
alias grep='grep --color=always -i'
alias get='wget -m -np -c -U "eye01" -R "index.html*"'
alias please="sudo !!"
alias ...="cd ../.."
alias ....="cd ../../.."
alias ~="cd ~"
[[ -f $HOME/.aliases ]] && source $HOME/.aliases

# =======================================
# Custom Functions
# =======================================
fif() {
    findr --type f "$1" | xargs grep -n -i "$2"
}

sourceZsh() {
    source ~/.zshrc
    backupToDrive ~/.zshrc
    echo "New .zshrc sourced."
}

editZsh() {
    updateYadm
    nano ~/.zshrc
    source ~/.zshrc
    backupToDrive ~/.zshrc
    echo "New .zshrc sourced."
}

updateYadm() {
    yadm pull
}

backupToDrive() {
    yadm add ~/.zshrc
    yadm commit -m "updated .zshrc"
    yadm push
    echo "New .zshrc backed up to yadm."
}

# =======================================
# Plugins and External Files
# =======================================
# Load custom variables, aliases, and functions
[[ -f ~/.zsh_files/variables.zsh ]] && source ~/.zsh_files/variables.zsh
[[ -f ~/.zsh_files/aliases.zsh ]] && source ~/.zsh_files/aliases.zsh
[[ -f ~/.zsh_files/tct.zsh ]] && source ~/.zsh_files/tct.zsh
[[ -f ~/.zsh_files/functions.zsh ]] && source ~/.zsh_files/functions.zsh

# Zinit Initialization
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    echo "Installing Zinit Plugin Manager..."
    mkdir -p "$HOME/.local/share/zinit"
    chmod g-rwX "$HOME/.local/share/zinit"
    git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git"
fi
source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"

# Zinit Plugins
zinit light-mode for \
    zinit-zsh/z-a-patch-dl \
    zinit-zsh/z-a-as-monitor \
    zinit-zsh/z-a-bin-gem-node

zplugin light zdharma/zplugin-crasis

# Zplug Initialization
export ZPLUG_HOME=$HOME/.zplug
[[ ! -f $ZPLUG_HOME/init.zsh ]] && git clone https://github.com/zplug/zplug $ZPLUG_HOME
source $ZPLUG_HOME/init.zsh
zplug 'zplug/zplug', hook-build:'zplug --self-manage'

# Load Oh-My-Zsh Libraries
zplug "lib/completion", from:oh-my-zsh
zplug "lib/history", from:oh-my-zsh
zplug "lib/key-bindings", from:oh-my-zsh
zplug "lib/termsupport", from:oh-my-zsh
zplug "lib/directories", from:oh-my-zsh
zplug "plugins/nmap", from:oh-my-zsh

# Syntax Highlighting and Autopair
zplug 'zdharma/fast-syntax-highlighting', defer:2, hook-load:'FAST_HIGHLIGHT=()'
zplug 'hlissner/zsh-autopair', defer:2

# Install and Load Plugins
zplug check || zplug install
zplug load

# =======================================
# Additional Tools and Themes
# =======================================
# Minimal theme
MNML_USER_CHAR=$USER
MNML_INSERT_CHAR='do:'
zplug 'subnixr/minimal', use:minimal.zsh, as:theme

# TinyCareTerminal
[[ -f ~/.zsh_files/tct.zsh ]] && source ~/.zsh_files/tct.zsh

# =======================================
# Miscellaneous
# =======================================
# Use `lf` for directory switching
lfcd() {
    tmp="$(mktemp)"
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp" >/dev/null
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}

# Virtual Environment Auto-Activation
activate_virtualenv() {
    if [ -f env/bin/activate ]; then . env/bin/activate
    elif [ -f ../env/bin/activate ]; then . ../env/bin/activate
    elif [ -f ../../env/bin/activate ]; then . ../../env/bin/activate
    elif [ -f ../../../env/bin/activate ]; then . ../../../env/bin/activate
    fi
}

# Good Morning Script
startmyday() {
    echo "Good morning, ShadowHarvy."
    echo "\nUpdating..."
    pacui u
    python3 -m pip install --user --upgrade anki_vector
    echo "\nThe weather right now:"
    ansiweather -l Toronto
}

# =======================================
# User Profile and Additional Configs
# =======================================
source $HOME/.profile
[[ -f ~/.cache/wal/sequences ]] && cat ~/.cache/wal/sequences &
