#!/bin/bash
# ===----------------------------------------===
#            mkscript Utility v2.1
# ===----------------------------------------===
# Author: ShadowHarvy (The Script Whisperer)
# Version: 2.1 (Even More Personalities)
#
# Purpose: Creates a script, makes it executable, and opens
#          it in your editor of choice, all with a flair for
#          the dramatic provided by selectable personalities.
#
# Usage:
#   mkscript [options] <script_name>
#
# Options:
#   -p <persona>  Choose a personality: wizard, glados, dm, sassy, sarcastic.
#   -s <shebang>  Specify a shebang (e.g., "#!/bin/bash").
#   -e <editor>   Specify an editor (e.g., "vim").
#   -h            Show this help message.

# --- Strict Mode & Safety First ---
set -euo pipefail

# --- Configuration ---
DEFAULT_EDITOR="nvim"
DEFAULT_SHEBANG="#!/bin/sh"
SKIP_THEATRICS=0

# --- Colors & Styles ---
if [ -t 1 ]; then
  C_RESET='\033[0m' C_BOLD='\033[1m' C_RED='\033[0;31m' C_GREEN='\033[0;32m'
  C_YELLOW='\033[0;33m' C_BLUE='\033[0;34m' C_PURPLE='\033[0;35m' C_CYAN='\033[0;36m'
else
  C_RESET='' C_BOLD='' C_RED='' C_GREEN='' C_YELLOW='' C_BLUE='' C_PURPLE='' C_CYAN=''
fi

# --- Global State & Persona Text ---
declare -A TEXT # This will hold the text for the chosen persona

# --- Functions ---

print_usage() {
  cat <<EOF
Usage: $0 [options] <script_name>

The mkscript Utility v2.1

Creates a new script, makes it executable, and opens it in an editor.

Options:
  -p <persona>  Choose a personality. Available: wizard, glados, dm, sassy, sarcastic.
                If omitted, a random one is chosen.
  -s <shebang>  Specify a shebang. Defaults to "$DEFAULT_SHEBANG".
                (e.g., -s "#!/bin/bash")
  -e <editor>   Specify an editor. Defaults to "$DEFAULT_EDITOR".
  -h            Show this help message and exit.
EOF
}

# Loads the text strings for the selected personality.
setup_persona() {
  local choice="${1:-}"
  local personas=("wizard" "glados" "dm" "sassy" "sarcastic")

  if [ -z "$choice" ]; then
    choice=${personas[$((RANDOM % ${#personas[@]}))]}
    printf "${C_YELLOW}No persona specified. The fates have chosen: ${C_BOLD}%s${C_RESET}\n" "$choice"
    sleep 1
  fi

  # --- Persona Text Definitions ---
  declare -A WIZARD_TEXT=(
    [title]="The Grand Script Conjurer"
    [author]="Scrolls scribed by: ShadowHarvy"
    [intro_start]="Initiating script conjuration sequence..."
    [intro_online]="The runes glow... The ritual is ready!"
    [intro_shebang]="Brewing shebang potion..."
    [intro_perms]="Consulting the permissions oracle..."
    [intro_filename]="Polishing the artifact's true name..."
    [intro_editor]="Waking the editing familiar..."
    [no_filename]="You must provide a name for the new scroll!"
    [already_exists]="A scroll named '%s' already exists in this realm. Choose another name."
    [creating]="Alright, alright. Conjuring '%s'..."
    [shebang_written]="The initial incantation has been inscribed."
    [chmod_perms]="Bestowing the holy +x permission..."
    [editor_summon]="Summoning the %s familiar to attend to '%s'..."
    [conclusion]="Mission Accomplished! '%s' is ready for your genius."
  )

  declare -A GLADOS_TEXT=(
    [title]="Aperture Science Quick-Start Test Chamber Fabricator"
    [author]="'We do what we must, because we can.'"
    [intro_start]="Initiating test chamber fabrication..."
    [intro_online]="Fabrication unit... ONLINE."
    [intro_shebang]="Calibrating core directive..."
    [intro_perms]="Assigning operational parameters..."
    [intro_filename]="Assigning test chamber designation..."
    [intro_editor]="Activating the editing sub-routine..."
    [no_filename]="A test chamber designation is required for this test."
    [already_exists]="Error: Test chamber '%s' already exists. Unscheduled disassembly is not recommended."
    [creating]="Now fabricating test chamber '%s'. Try not to break this one."
    [shebang_written]="Core directive has been installed."
    [chmod_perms]="Operational parameters have been set."
    [editor_summon]="Now interfacing with the %s editing module for chamber '%s'..."
    [conclusion]="Fabrication complete. Your mandatory participation in this test may now begin."
  )

  declare -A DM_TEXT=(
    [title]="The Adventurer's Blank Character Sheet"
    [author]="Quest issued by: The Dungeon Master"
    [intro_start]="A new adventurer is born..."
    [intro_online]="The character sheet is ready to be filled!"
    [intro_shebang]="Choosing a starting class and alignment..."
    [intro_perms]="Granting proficiency bonuses..."
    [intro_filename]="Naming your new hero..."
    [intro_editor]="Handing you the Quill of Editing..."
    [no_filename]="Your adventurer needs a name to be remembered by!"
    [already_exists]="An adventurer named '%s' is already in the party. Try a different name."
    [creating]="Creating a new character sheet for '%s'..."
    [shebang_written]="Class and alignment have been noted."
    [chmod_perms]="Proficiencies have been granted."
    [editor_summon]="You take up the %s Quill to write the tale of '%s'..."
    [conclusion]="Your new adventurer, '%s', is ready. May their quests be legendary."
  )

  declare -A SASSY_TEXT=(
    [title]="The 'I'm Too Busy For This' Script Maker"
    [author]="By: Someone with better things to do."
    [intro_start]="Ugh, fine. Let's make a script. Let's get this over with."
    [intro_online]="There. It's ready. Are we done?"
    [intro_shebang]="Adding the shebang thingy..."
    [intro_perms]="Making it executable, whatever..."
    [intro_filename]="Giving it a name, because apparently it needs one..."
    [intro_editor]="Waking up the editor. It was probably sleeping..."
    [no_filename]="Hello? You forgot the filename. Not a great start."
    [already_exists]="That name's taken, honey. Think of something original for once."
    [creating]="Creating '%s'. Don't mess it up."
    [shebang_written]="Shebang's in. Next."
    [chmod_perms]="It's executable now. You're welcome."
    [editor_summon]="Opening '%s' in %s. Now the real work starts, and it's all on you."
    [conclusion]="Okay, '%s' is ready. Don't call me, I'll call you. (I won't call you)."
  )

  declare -A SARCASTIC_TEXT=(
    [title]="The Procrastinator's Script Pro-Creator"
    [author]="Because typing three whole commands is just too much."
    [intro_start]="Initiating the incredibly complex process of... creating a file."
    [intro_online]="Wow. We did it. A file has been created. Truly groundbreaking."
    [intro_shebang]="Carefully placing the shebang at the top. A crucial step."
    [intro_perms]="Bestowing the great and powerful +x permission. All hail the +x."
    [intro_filename]="Thinking long and hard about the filename..."
    [intro_editor]="Summoning the editor from its slumber..."
    [no_filename]="You had one job. One. And that was to provide a filename."
    [already_exists]="Oh, look, '%s' already exists. What a shocking development."
    [creating]="Now creating '%s'. I'll try to contain my excitement."
    [shebang_written]="The shebang is there. I checked. Twice."
    [chmod_perms]="It's executable. I'm sure it will be a masterpiece."
    [editor_summon]="Now opening '%s' in %s. Try to make it look like you're busy."
    [conclusion]="There you go. '%s' is all ready. A triumph of modern automation."
  )

  case "$choice" in
  wizard) for k in "${!WIZARD_TEXT[@]}"; do TEXT["$k"]="${WIZARD_TEXT[$k]}"; done ;;
  glados) for k in "${!GLADOS_TEXT[@]}"; do TEXT["$k"]="${GLADOS_TEXT[$k]}"; done ;;
  dm) for k in "${!DM_TEXT[@]}"; do TEXT["$k"]="${DM_TEXT[$k]}"; done ;;
  sassy) for k in "${!SASSY_TEXT[@]}"; do TEXT["$k"]="${SASSY_TEXT[$k]}"; done ;;
  sarcastic) for k in "${!SARCASTIC_TEXT[@]}"; do TEXT["$k"]="${SARCASTIC_TEXT[$k]}"; done ;;
  *)
    printf "${C_RED}Error: Unknown persona '%s'.${C_RESET}\n" "$choice"
    print_usage
    exit 1
    ;;
  esac
}

initial_loader() {
  if [ "$SKIP_THEATRICS" -eq 1 ]; then return; fi
  local interval=0.1

  printf "\n"
  printf "${TEXT[intro_start]}\n"
  sleep 0.5

  printf "  -> %s" "${TEXT[intro_shebang]}"
  for i in {1..5}; do
    printf "."
    sleep $interval
  done
  printf " Done.\n"

  printf "  -> %s" "${TEXT[intro_perms]}"
  for i in {1..5}; do
    printf "."
    sleep $interval
  done
  printf " Granted!\n"

  printf "  -> %s" "${TEXT[intro_filename]}"
  for i in {1..5}; do
    printf "."
    sleep $interval
  done
  printf " Shiny!\n"

  printf "  -> %s" "${TEXT[intro_editor]}"
  for i in {1..5}; do
    printf "."
    sleep $interval
  done
  printf " It lives!\n"

  sleep 0.5
  printf "${C_GREEN}%s${C_RESET}\n" "${TEXT[intro_online]}"
  sleep 1
}

# --- Main Execution Logic ---
main() {
  local persona_choice=""
  local shebang="$DEFAULT_SHEBANG"
  local editor="$DEFAULT_EDITOR"

  while getopts ":p:s:e:h" opt; do
    case $opt in
    p) persona_choice="$OPTARG" ;;
    s) shebang="$OPTARG" ;;
    e) editor="$OPTARG" ;;
    h)
      print_usage
      exit 0
      ;;
    \?)
      printf "Invalid option: -$OPTARG\n" >&2
      print_usage
      exit 1
      ;;
    esac
  done
  shift $((OPTIND - 1)) # Remove parsed options

  setup_persona "$persona_choice"

  if [ -z "$1" ]; then
    printf "${C_RED}%s${C_RESET}\n" "${TEXT[no_filename]}" >&2
    exit 1
  fi
  local SCRIPT_NAME="$1"

  if [ -e "$SCRIPT_NAME" ]; then
    printf "${C_RED}"
    printf "${TEXT[already_exists]}" "$SCRIPT_NAME"
    printf "${C_RESET}\n" >&2
    exit 1
  fi

  clear
  cat <<EOF
====================================================================
${TEXT[title]}
${TEXT[author]}
====================================================================
EOF

  initial_loader

  printf "\n"
  printf "${C_CYAN}"
  printf "${TEXT[creating]}" "$SCRIPT_NAME"
  printf "${C_RESET}\n"

  printf "%s\n\n" "$shebang" >"$SCRIPT_NAME"
  printf " -> %s\n" "${TEXT[shebang_written]}"

  chmod +x "$SCRIPT_NAME"
  printf " -> %s\n" "${TEXT[chmod_perms]}"

  printf " -> "
  printf "${TEXT[editor_summon]}" "$editor" "$SCRIPT_NAME"
  printf "\n"

  # Launch the editor
  "$editor" "$SCRIPT_NAME"

  printf "\n${C_GREEN}*** "
  printf "${TEXT[conclusion]}" "$SCRIPT_NAME"
  printf " ***${C_RESET}\n\n"
}

# --- Script Entry Point ---
main "$@"

exit 0
