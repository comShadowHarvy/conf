#!/bin/bash
# Steps to update your configuration

# 1. Update your .aliases file
echo "Updating .aliases file..."
cat > ~/.aliases <<'EOL'
#!/usr/bin/env bash
# ========================
# General Functions
# ========================

# Create a directory and navigate to it
mkcd() {
    if [ -z "$1" ]; then
        echo "Usage: mkcd <directory>"
        return 1
    fi
    mkdir -p "$1" && cd "$1"
}

# Navigate to a directory matching a pattern
cdf() {
    if [ -z "$1" ]; then
        echo "Usage: cdf <pattern>"
        return 1
    fi
    local dir
    dir=$(find . -maxdepth 1 -type d -name "*$1*" | head -n 1)
    if [ -n "$dir" ]; then
        cd "$dir" || return 1
    else
        echo "No directory matching pattern '$1' found."
        return 1
    fi
}

# Extract wisdom from YouTube transcripts (requires yt and fabric)
ytt() {
    if [ -z "$1" ]; then
        echo "Usage: ytt <youtube_link>"
        return 1
    fi
    # Check if required commands are installed
    if ! command -v yt &>/dev/null || ! command -v fabric &>/dev/null; then
        echo "Error: Both 'yt' and 'fabric' must be installed."
        return 1
    fi
    local transcript
    transcript=$(yt --transcript "$1")
    echo "$transcript" | fabric --stream --pattern extract_wisdom
}

# Extract various archive formats
extract() {
    if [[ -z "$1" || "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: extract <archive> [directory]"
        echo "Supports: tar.bz2, tar.gz, tar.xz, bz2, gz, zip, rar, 7z, etc."
        return 0
    fi

    if [ ! -f "$1" ]; then
        echo "File '$1' not found."
        return 1
    fi

    # If a destination directory is provided
    if [[ -n "$2" ]]; then
        mkdir -p "$2"
        cd "$2" || return 1
    fi

    case "$1" in
        *.tar.bz2|*.tbz2|*.tbz) tar xvjf "$1" ;;
        *.tar.gz|*.tgz) tar xvzf "$1" ;;
        *.tar.xz) tar xvJf "$1" ;;
        *.tar) tar xvf "$1" ;;
        *.zip) unzip "$1" ;;
        *.rar) unrar x "$1" ;;
        *.7z) 7z x "$1" ;;
        *.gz) gunzip "$1" ;;
        *.bz2) bunzip2 "$1" ;;
        *.xz|*.txz|*.lzma|*.tlz) xz -d "$1" ;;
        *) echo "Unsupported file type: $1" ;;
    esac

    # Return to original directory if a destination was provided
    if [[ -n "$2" ]]; then
        cd - || return 1
    fi
}

# ========================
# Yazi File Manager
# ========================

# Main alias for yazi file manager
alias y='yazi'

# Open yazi in the current directory
alias ya='yazi .'

# Open yazi and navigate to home directory
alias yh='yazi ~'

# Open yazi in downloads folder
alias yd='yazi ~/Downloads'

# Function to navigate to a directory and then open yazi
cdz() {
    if [ -z "$1" ]; then
        yazi .
    else
        cd "$1" && yazi .
    fi
}

# Function to open yazi in a directory, and cd to that directory when exiting yazi
function ycd() {
    tmp="$(mktemp -t "yazi-cwd.XXXXX")"
    yazi --cwd-file="$tmp" "$@"
    if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
        cd -- "$cwd"
    fi
    rm -f -- "$tmp"
}

# ========================
# File Management
# ========================

# Enhanced file management aliases
alias cp="rsync -avhW --no-compress --progress"  # Use rsync for copying
alias mkdir='mkdir -pv'                           # Verbose mkdir with parent directories

if command -v eza >/dev/null 2>&1; then
    alias ls='eza -a --icons'
    alias ll='eza -al --icons'
    alias lt='eza -a --tree --level=1 --icons'
else
    alias ls="ls --color=auto"      # Colorize ls output
    alias ll="ls -la --color=auto"  # Detailed list including hidden files
    alias l.="ls -d .* --color=auto" # List hidden files only
fi

alias findr='fd'  # Using fd as a faster alternative to find

# Function to search files for text (combining find and grep)
ftext() {
    if [ $# -eq 0 ]; then
        echo "Usage: ftext <search_pattern> [path]"
        return 1
    fi
    
    local pattern=$1
    local path=${2:-.}
    
    # Check if ripgrep is available
    if command -v rg &>/dev/null; then
        rg --color=always --line-number --smart-case "$pattern" "$path"
    else
        grep -r --color=always -n "$pattern" "$path"
    fi
}

# Function to find directories by name pattern
fdir() {
    if [ -z "$1" ]; then
        echo "Usage: fdir <pattern> [max_depth]"
        return 1
    fi
    
    local pattern=$1
    local depth=${2:-3}  # Default depth is 3 levels
    
    find . -maxdepth "$depth" -type d -name "*$pattern*" | sort
}

# ========================
# System Management
# ========================

alias please="sudo !!"                           # Run the last command with sudo
alias h="history"                                # Show command history
alias j="jobs -l"                                # List active jobs
alias reload="exec ${SHELL} -l"                  # Reload the shell
alias meminfo="free -m -l -t"                    # Show memory usage
alias psmem="ps auxf | sort -nr -k 4 | head -10" # Top memory consumers
alias pscpu="ps auxf | sort -nr -k 3 | head -10" # Top CPU consumers
alias cpuinfo="lscpu"                            # Display CPU info
alias ports="netstat -tulanp"                    # List open ports
alias lsport="sudo lsof -i"                      # List processes using ports
alias ip="dig +short myip.opendns.com @resolver1.opendns.com" # Get public IP

# Add a function to generate summaries of a directory
dirsummary() {
    local dir=${1:-.}
    
    echo "üìÇ Directory Summary for: $(realpath "$dir")"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    echo "üìä Stats:"
    echo "  Total items: $(find "$dir" -type f -o -type d | wc -l)"
    echo "  Files: $(find "$dir" -type f | wc -l)"
    echo "  Directories: $(find "$dir" -type d | wc -l)"
    echo "  Total size: $(du -sh "$dir" | cut -f1)"
    
    echo -e "\nüìë File types:"
    find "$dir" -type f | grep -v "^\." | grep -o "\.[^\.]*$" | sort | uniq -c | sort -rn | head -10
    
    echo -e "\nüïí Recently modified files:"
    find "$dir" -type f -mtime -7 | head -5
    
    echo -e "\nüìÅ Largest subdirectories:"
    du -h --max-depth=1 "$dir" | sort -hr | head -5
}

# ========================
# Networking
# ========================

alias nmap_open_ports="nmap --open"
alias nmap_list_interfaces="nmap --iflist"
alias nmap_slow="sudo nmap -sS -v -T1"
alias nmap_fin="sudo nmap -sF -v"
alias nmap_fast="nmap -F -T5 --version-light --top-ports 300"
alias nmap_full="sudo nmap -sS -T4 -PE -PP -PS80,443 -PY -g 53 -A -p1-65535 -v"

# Function to quickly share a file or directory via HTTP
share() {
    local port=${2:-8000}  # Default port 8000
    
    if [ -z "$1" ]; then
        echo "Usage: share <file_or_directory> [port]"
        echo "Starts a simple HTTP server to share a file or directory."
        return 1
    fi
    
    # Check if the path exists
    if [ ! -e "$1" ]; then
        echo "Error: $1 does not exist."
        return 1
    fi
    
    # Check if path is a directory
    if [ -d "$1" ]; then
        # For directories, serve the whole directory
        (cd "$1" && python3 -m http.server "$port")
    else
        # For files, create a temporary directory
        local temp_dir=$(mktemp -d)
        local filename=$(basename "$1")
        cp "$1" "$temp_dir"
        
        echo "Sharing $filename at http://localhost:$port/$filename"
        (cd "$temp_dir" && python3 -m http.server "$port")
        
        # Clean up when done
        rm -rf "$temp_dir"
    fi
}

# ========================
# Media & Downloads
# ========================

alias ytmp3="youtube-dl --extract-audio --audio-format mp3"
alias wget='wget --no-hsts'                    # Prevent .wget-hsts file creation
alias get='wget -m -np -c -R "index.html*"'    # Recursive website download
alias playmp3='for i in *.mp3; do mplayer "$i"; done' # Play all MP3s in the directory
alias music="mplayer --shuffle *"              # Shuffle and play media files

# ========================
# Navigation
# ========================

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias ~="cd ~"           # Go to home directory
alias dl="cd ~/Downloads" # Go to Downloads directory
alias dt="cd ~/Desktop"   # Go to Desktop directory
alias p="cd ~/projects"   # Go to projects directory

# ========================
# Git and Development
# ========================

alias code="flatpak run com.visualstudio.code"  # Launch VS Code
alias studio="flatpak run com.visualstudio.code"# Alias for VS Code
alias gitstatus="git status -s"
alias gita="git add -A"
alias gitcm="git commit -m"
alias gitp="git push"
alias gri="git rebase -i"                       # Interactive rebase
alias glog="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit" # Better git log

# Improved quickgit function with commit message verification
quickgit() {
    if [ -z "$1" ]; then
        echo "Usage: quickgit <commit message>"
        echo "Stages all changes, commits with the provided message, and pushes to the remote repository."
        return 1
    fi
    
    # Show what's being staged
    git status -s
    echo "Staging all changes..."
    git add .
    
    # Commit with the provided message
    echo "Committing with message: $*"
    git commit -m "$*"
    
    # Push to the remote repository
    echo "Pushing to remote..."
    git push
}

# Function to create a new script, make it executable, and open it in your editor
mkscript() {
    if [ -z "$1" ]; then
        echo "Usage: mkscript <script_name>"
        return 1
    fi
    
    # Add .sh extension if not provided
    [[ "$1" != *.* ]] && FILE="$1.sh" || FILE="$1"
    
    # Create the file with a bash shebang
    echo '#!/usr/bin/env bash' > "$FILE"
    echo '' >> "$FILE"
    echo '# Created on: '"$(date)" >> "$FILE"
    echo '# Description: ' >> "$FILE"
    echo '' >> "$FILE"
    echo '# Main script body' >> "$FILE"
    echo '' >> "$FILE"
    
    # Make it executable
    chmod +x "$FILE"
    
    # Open in preferred editor (using nvim if available, else fallback)
    if command -v nvim &>/dev/null; then
        nvim "$FILE"
    elif command -v code &>/dev/null; then
        code "$FILE"
    else
        $EDITOR "$FILE"
    fi
}

# ========================
# Fun and Miscellaneous
# ========================

alias neofetch="neofetch | lolcat"
alias lweather="ansiweather -l minto ontario"  # Weather for Minto, Ontario
alias now="date +%T"                           # Display current time
alias week="date +%V"                          # Display current week number
alias chx="chmod +x"                           # Make a script executable
alias :q="exit"                                # Vim-style exit

# ========================
# Tmux Shortcuts
# ========================

alias ta="tmux attach -t"
alias ts="tmux new-session -s"
alias tl="tmux list-sessions"
alias tk="tmux kill-session -t"                # Kill a tmux session
alias tn="tmux new -s"                         # Create a new session with name

# ========================
# Miscellaneous Tools
# ========================

alias bc="bc -l"                               # Calculator
alias sha1="openssl sha1"                      # Generate SHA1 digest
alias flushmcd='echo "flush_all" | nc 10.10.27.11 11211'  # Flush Memcached
alias vnstat="vnstat -i eth1"                  # Network usage statistics

# ========================
# Default Applications
# ========================

alias browser="google-chrome-stable"
alias vlc="vlc"
alias spotify="flatpak run com.spotify.Client"
alias discord="flatpak run com.discordapp.Discord"
alias teams="flatpak run com.microsoft.Teams"

# ========================
# Custom Commands
# ========================

alias loo="| lolcat"           # Pipe outputs to lolcat
alias grep="grep --color=auto" # Colorize grep output
alias fd="fd --color=auto"     # Colorize fd output
alias diff="diff --color=auto" # Colorize diff output

# Fixed updateall function
updateall() {
    echo "üîÑ Starting system update..."
    
    # Determine Linux distribution
    local distro
    if [ -f /etc/os-release ]; then
        distro=$(grep '^ID=' /etc/os-release | cut -d= -f2 | tr -d '"')
    else
        distro="unknown"
    fi

    # Update system packages based on distribution
    echo "üì¶ Updating system packages for $distro..."
    case "$distro" in
        alpine)
            echo "Running: sudo apk update"
            sudo apk update
            echo "Running: sudo apk upgrade"
            sudo apk upgrade
            ;;
        debian|ubuntu)
            echo "Running: sudo apt update"
            sudo apt update
            echo "Running: sudo apt upgrade -y"
            sudo apt upgrade -y
            ;;
        fedora|rhel|centos)
            if command -v dnf >/dev/null 2>&1; then
                echo "Running: sudo dnf upgrade --refresh -y"
                sudo dnf upgrade --refresh -y
            else
                echo "Running: sudo yum update -y"
                sudo yum update -y
            fi
            ;;
        arch|manjaro|endeavouros)
            echo "Running: sudo pacman -Syu"
            sudo pacman -Syu
            ;;
        *)
            # Default to pacman if distribution couldn't be identified
            if command -v pacman >/dev/null 2>&1; then
                echo "Running: sudo pacman -Syu"
                sudo pacman -Syu
            else
                echo "‚ö†Ô∏è Unknown distribution. No system update performed."
            fi
            ;;
    esac

    # Update flatpak if available
    if command -v flatpak >/dev/null 2>&1; then
        echo "üì¶ Updating Flatpak packages..."
        flatpak update -y
    fi

    # Update snap if available
    if command -v snap >/dev/null 2>&1; then
        echo "üì¶ Updating Snap packages..."
        sudo snap refresh
    fi

    # Update Homebrew if available
    if command -v brew >/dev/null 2>&1; then
        echo "üì¶ Updating Homebrew packages..."
        brew update
        brew upgrade
    fi
    
    # Update ZimFW if available
    if command -v zimfw >/dev/null 2>&1; then
        echo "üõ†Ô∏è Updating ZimFW..."
        zimfw update
    fi
    
    # Update Oh My Posh if available
    if command -v oh-my-posh >/dev/null 2>&1; then
        echo "üõ†Ô∏è Updating Oh My Posh..."
        sudo oh-my-posh update
    fi
    
    echo "üéâ System update complete!"
}

# New functions for Christitus installers
christitus() {
    curl -fsSL christitus.com/linux | sh
}

christitusdev() {
    curl -fsSL https://christitus.com/linuxdev | sh
}

# Shell management
alias zimupdate="zimfw update"
alias reload-zsh="source ~/.zshrc"
alias edit-zsh="nvim ~/.zshrc"
alias edit-aliases="nvim ~/.aliases"

# Install a package using the custom install script
pkg-install() {
    if [ -z "$1" ]; then
        echo "Usage: pkg-install <package> [--verbose]"
        return 1
    fi
    
    if [ -f ~/install.sh ]; then
        ~/install.sh "$@"
    else
        echo "Error: install.sh script not found in home directory."
        return 1
    fi
}
EOL

# 2. Update your install.sh file
echo "Updating install.sh file..."
cat > ~/install.sh <<'EOL'
#!/bin/bash

# Check if package name is provided
if [ -z "$1" ]; then
  echo "Usage: $0 <package> [--verbose]"
  echo "Example: $0 neovim"
  echo "Example: $0 yazi --verbose"
  exit 1
fi

PACKAGE="$1"
VERBOSE=0
installed=0

# Check for verbose flag
if [ "$2" = "--verbose" ]; then
  VERBOSE=1
fi

# Function to log messages if verbose is enabled
log() {
  if [ $VERBOSE -eq 1 ]; then
    echo "$1"
  fi
}

# Function to map package names for different package managers
map_package_name() {
  local pkg="$1"
  local manager="$2"
  
  case "$pkg:$manager" in
    "neovim:apt-get") echo "neovim" ;;
    "neovim:pacman") echo "neovim" ;;
    "neovim:brew") echo "neovim" ;;
    "yazi:cargo") echo "yazi" ;;
    # Add more mappings as needed
    *) echo "$pkg" ;;  # Default to the original name
  esac
}

# Function to try a command and mark success if it runs successfully
try_install() {
  local manager="$1"
  local cmd="$2"
  local pkg=$(map_package_name "$PACKAGE" "$manager")
  
  echo "Trying: $cmd $pkg"
  if [ $VERBOSE -eq 1 ]; then
    $cmd "$pkg" && installed=1 && return 0
  else
    $cmd "$pkg" >/dev/null 2>&1 && installed=1 && return 0
  fi
  return 1
}

# Handle special cases for certain packages
handle_special_cases() {
  case "$PACKAGE" in
    "yazi")
      # For Yazi, try cargo installation as fallback
      if command -v cargo >/dev/null 2>&1; then
        echo "Trying cargo installation for Yazi..."
        cargo install --locked yazi-fm && installed=1 && return 0
      fi
      ;;
  esac
  return 1
}

# Attempt installation using available package managers in order
if command -v pacman >/dev/null 2>&1; then
  try_install "pacman" "sudo pacman -S --noconfirm"
  [ $installed -eq 1 ] && echo "‚úÖ Successfully installed $PACKAGE using pacman" && exit 0
fi

if command -v yay >/dev/null 2>&1; then
  try_install "yay" "yay -S --noconfirm"
  [ $installed -eq 1 ] && echo "‚úÖ Successfully installed $PACKAGE using yay" && exit 0
fi

if command -v apt-get >/dev/null 2>&1; then
  # Update package lists first
  log "Updating apt package lists..."
  sudo apt-get update >/dev/null 2>&1
  try_install "apt-get" "sudo apt-get install -y"
  [ $installed -eq 1 ] && echo "‚úÖ Successfully installed $PACKAGE using apt-get" && exit 0
fi

if command -v dnf >/dev/null 2>&1; then
  try_install "dnf" "sudo dnf install -y"
  [ $installed -eq 1 ] && echo "‚úÖ Successfully installed $PACKAGE using dnf" && exit 0
fi

if command -v zypper >/dev/null 2>&1; then
  try_install "zypper" "sudo zypper install -y"
  [ $installed -eq 1 ] && echo "‚úÖ Successfully installed $PACKAGE using zypper" && exit 0
fi

if command -v apk >/dev/null 2>&1; then
  try_install "apk" "sudo apk add"
  [ $installed -eq 1 ] && echo "‚úÖ Successfully installed $PACKAGE using apk" && exit 0
fi

if command -v brew >/dev/null 2>&1; then
  try_install "brew" "brew install"
  [ $installed -eq 1 ] && echo "‚úÖ Successfully installed $PACKAGE using brew" && exit 0
fi

# Try cargo for Rust packages
if command -v cargo >/dev/null 2>&1; then
  case "$PACKAGE" in
    "yazi"|"yazi-fm")
      try_install "cargo" "cargo install --locked"
      [ $installed -eq 1 ] && echo "‚úÖ Successfully installed $PACKAGE using cargo" && exit 0
      ;;
  esac
fi

# Try handling special cases as a last resort
handle_special_cases
[ $installed -eq 1 ] && echo "‚úÖ Successfully installed $PACKAGE using special handling" && exit 0

echo "‚ùå No supported package manager found or installation failed for $PACKAGE."
echo "You may need to install it manually or check the package name."
exit 1
EOL

# Make install.sh executable
chmod +x ~/install.sh

# 3. Make the files executable
chmod +x ~/.aliases

# 4. Source the updated aliases
echo "Applying changes..."
source ~/.aliases

echo "‚úÖ Setup complete! Your improved shell configuration is now ready."
echo "   You can now use commands like:"
echo "   - updateall    - Update your system packages"
echo "   - y            - Launch Yazi file manager"
echo "   - ycd          - Launch Yazi with directory tracking"
echo "   - pkg-install  - Install packages using your improved script"