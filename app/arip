#!/bin/bash

# --- Configuration ---
# List of directories required by the ARM Docker container
# Using $HOME ensures correct expansion to the user's home directory
required_dirs=(
    "$HOME/arm"
    "$HOME/Music"
    "$HOME/logs"
    "$HOME/media"
    "$HOME/config"
)

# --- Docker Daemon Check ---
echo "Checking if Docker daemon is running..."
if ! docker info > /dev/null 2>&1; then
    echo "Error: Docker daemon does not seem to be running or accessible."
    echo "Please start the Docker service and try again."
    exit 1
else
    echo "Docker daemon looks okay. Proceeding..."
fi
echo

# --- Directory Check & Creation ---
echo "Checking if required directories exist... because apparently, I have to do everything."

for dir_path in "${required_dirs[@]}"; do
    # No need for eval here, $HOME expands correctly
    if [ ! -d "$dir_path" ]; then
        echo "Directory '$dir_path' not found. Creating it for you. You're welcome."
        # Create the directory, -p ensures parent directories are also created if needed
        mkdir -p "$dir_path"
    else
        echo "Directory '$dir_path' already exists. Good job, I guess."
    fi
done

echo "Directory check complete. Shocking."
echo

# --- Fake Loading Screen of Sarcasm ---
echo "Initiating highly complex pre-Docker launch sequence..."
sleep 1
echo "Recalibrating the quantum flux capacitor... (Just kidding, I'm checking for coffee.)"
sleep 2
echo "Waking up the hamsters that power the server..."
echo "[▓▓▓▓                    ] 20% ... They're slow today."
sleep 2
echo "Consulting the ancient Docker scrolls..."
echo "[▓▓▓▓▓▓▓▓▓▓▓▓            ] 60% ... Yep, still confusing."
sleep 2
echo "Ensuring the bits and bytes are properly aligned..."
echo "[▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓    ] 90% ... Almost there, don't get impatient."
sleep 1
echo "Polishing the container... It likes to look shiny."
echo "[▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓] 100% ... Fine, fine, I'll start it."
echo
echo "Okay, enough messing around. Starting the ARM Ripper container..."
echo

# --- Run the Docker Command Directly ---
# Execute the command directly.
# Use $HOME for host paths and dynamically get UID/GID.
# Ensure no strange characters or line endings are present here.
docker run -d \
  -p "2323:8080" \
  -e ARM_UID="$(id -u)" \
  -e ARM_GID="$(id -g)" \
  -v "$HOME/arm:/home/arm" \
  -v "$HOME/Music:/home/arm/Music" \
  -v "$HOME/logs:/home/arm/logs" \
  -v "$HOME/media:/home/arm/media" \
  -v "$HOME/config:/etc/arm/config" \
  --device=/dev/sr0:/dev/sr0 \
  --device=/dev/sr1:/dev/sr1 \
  --device=/dev/sr2:/dev/sr2 \
  --device=/dev/sr3:/dev/sr3 \
  --privileged \
  --restart "always" \
  --name "arm-rippers" \
  automaticrippingmachine/automatic-ripping-machine:latest

# Check the exit status of the docker command
docker_exit_status=$?
if [ $docker_exit_status -eq 0 ]; then
    echo
    echo "Docker container 'arm-rippers' should be starting up in the background."
    echo "You can check its status with 'docker ps' or logs with 'docker logs arm-rippers'."
    echo "Don't mess it up."
else
    echo
    echo "Uh oh. Something went wrong trying to start the Docker container (Exit code: $docker_exit_status)."
    # Add suggestion to check daemon status based on the error code
    if [ $docker_exit_status -eq 125 ]; then
        echo "Exit code 125 often indicates an issue with the Docker command itself or communication with the daemon."
        echo "Please double-check the command syntax and ensure the Docker service is running correctly."
    else
         echo "Check the output above for specific error messages. Good luck."
    fi
    exit 1
fi

exit 0
