#!/bin/bash

#===============================================================================
# raspi_scan - Raspberry Pi Network Scanner
# Created by: mkscript utility with wizard persona
#===============================================================================

# Default network range
NETWORK="192.168.1.0/24"
VERBOSE=false
SHOW_HELP=false

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Usage function
usage() {
    cat << EOF
🧙‍♂️ Raspberry Pi Network Scanner

Usage: $0 [options] [network]

Options:
    -v, --verbose    Show verbose output including failed scans
    -h, --help       Show this help message

Arguments:
    network          Network to scan (default: 192.168.1.0/24)
                    Examples: 192.168.1.0/24, 10.0.0.0/24

Examples:
    $0                          # Scan default network (192.168.1.0/24)
    $0 192.168.0.0/24          # Scan specific network
    $0 -v 10.0.0.0/24          # Verbose scan of 10.0.0.x network

The script uses multiple methods to identify Raspberry Pi devices:
• MAC address OUI lookup (Raspberry Pi Foundation)
• SSH banner detection
• Common Raspberry Pi hostnames
• Port scanning for typical Pi services

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*)
            echo -e "${RED}Unknown option: $1${NC}" >&2
            usage
            exit 1
            ;;
        *)
            NETWORK="$1"
            shift
            ;;
    esac
done

# Check for required tools
check_dependencies() {
    local missing_tools=()
    
    for tool in nmap arp ping; do
        if ! command -v "$tool" >/dev/null 2>&1; then
            missing_tools+=("$tool")
        fi
    done
    
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        echo -e "${RED}❌ Missing required tools: ${missing_tools[*]}${NC}" >&2
        echo -e "${YELLOW}💡 Install with: sudo pacman -S nmap iputils${NC}" >&2
        exit 1
    fi
}

# Check if an IP is a Raspberry Pi based on MAC address
check_mac_address() {
    local ip="$1"
    local mac
    
    # Try to get MAC from ARP table
    mac=$(arp -n "$ip" 2>/dev/null | grep -oE "([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}")
    
    if [[ -z "$mac" ]]; then
        # Try ping first to populate ARP table
        ping -c 1 -W 1 "$ip" >/dev/null 2>&1
        mac=$(arp -n "$ip" 2>/dev/null | grep -oE "([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}")
    fi
    
    if [[ -n "$mac" ]]; then
        # Check for Raspberry Pi Foundation MAC address prefixes
        local mac_prefix="${mac:0:8}"
        case "$mac_prefix" in
            "b8:27:eb"|"dc:a6:32"|"e4:5f:01"|"28:cd:c1"|"d8:3a:dd"|"2c:cf:67")
                echo "$mac"
                return 0
                ;;
        esac
    fi
    
    return 1
}

# Check SSH banner for Raspberry Pi indicators
check_ssh_banner() {
    local ip="$1"
    local banner
    
    # Try to get SSH banner with short timeout
    banner=$(timeout 3 ssh -o ConnectTimeout=2 -o BatchMode=yes -o StrictHostKeyChecking=no "$ip" 2>&1 | head -1)
    
    if [[ "$banner" =~ [Rr]aspberry|[Rr]aspi|raspberrypi ]]; then
        return 0
    fi
    
    return 1
}

# Scan for common Raspberry Pi services
check_pi_services() {
    local ip="$1"
    
    # Check for common Pi services (VNC, GPIO, etc.)
    if timeout 2 nc -z "$ip" 5900 2>/dev/null || \
       timeout 2 nc -z "$ip" 8080 2>/dev/null; then
        return 0
    fi
    
    return 1
}

# Main scanning function
scan_for_raspberry_pis() {
    local network="$1"
    local found_pis=()
    local scan_count=0
    local total_hosts
    
    echo -e "${BLUE}🔍 Scanning network: ${network}${NC}"
    echo -e "${CYAN}📡 Looking for Raspberry Pi devices...${NC}"
    echo
    
    # Get list of active hosts using nmap
    local active_hosts
    active_hosts=$(nmap -sn "$network" 2>/dev/null | grep -oE "([0-9]{1,3}\.){3}[0-9]{1,3}")
    
    if [[ -z "$active_hosts" ]]; then
        echo -e "${RED}❌ No active hosts found on network ${network}${NC}"
        return 1
    fi
    
    total_hosts=$(echo "$active_hosts" | wc -l)
    echo -e "${YELLOW}🌐 Found ${total_hosts} active hosts, scanning for Raspberry Pis...${NC}"
    echo
    
    # Scan each active host
    for ip in $active_hosts; do
        ((scan_count++))
        
        if [[ "$VERBOSE" == true ]]; then
            echo -e "${CYAN}[${scan_count}/${total_hosts}] Checking ${ip}...${NC}"
        fi
        
        local is_pi=false
        local pi_info=""
        local mac=""
        
        # Check MAC address (most reliable method)
        if mac=$(check_mac_address "$ip"); then
            is_pi=true
            pi_info="MAC: $mac"
        fi
        
        # Additional checks for confirmation
        local additional_info=""
        if check_ssh_banner "$ip"; then
            additional_info+=" SSH-Banner"
        fi
        
        if check_pi_services "$ip"; then
            additional_info+=" Services"
        fi
        
        # Try to get hostname
        local hostname
        hostname=$(timeout 2 nslookup "$ip" 2>/dev/null | grep "name =" | cut -d'=' -f2 | tr -d ' ' | sed 's/\.$//')
        
        if [[ -z "$hostname" ]]; then
            hostname=$(timeout 2 dig -x "$ip" +short 2>/dev/null | sed 's/\.$//')
        fi
        
        if [[ "$hostname" =~ [Rr]aspberry|[Rr]aspi|pi ]]; then
            if [[ "$is_pi" == false ]]; then
                is_pi=true
                pi_info="Hostname: $hostname"
            else
                additional_info+=" Hostname:$hostname"
            fi
        fi
        
        # Report findings
        if [[ "$is_pi" == true ]]; then
            echo -e "${GREEN}🍓 Raspberry Pi found: ${ip}${NC}"
            echo -e "   ${pi_info}${additional_info}"
            if [[ -n "$hostname" ]] && [[ "$pi_info" != *"Hostname"* ]]; then
                echo -e "   Hostname: $hostname"
            fi
            echo
            found_pis+=("$ip")
        elif [[ "$VERBOSE" == true ]]; then
            echo -e "   Not a Raspberry Pi"
        fi
    done
    
    # Summary
    echo -e "${BLUE}═══════════════════════════════════════${NC}"
    if [[ ${#found_pis[@]} -gt 0 ]]; then
        echo -e "${GREEN}🎉 Found ${#found_pis[@]} Raspberry Pi device(s):${NC}"
        for pi_ip in "${found_pis[@]}"; do
            echo -e "   • $pi_ip"
        done
    else
        echo -e "${YELLOW}🤷 No Raspberry Pi devices found on network ${network}${NC}"
    fi
    echo -e "${BLUE}═══════════════════════════════════════${NC}"
}

# Main execution
main() {
    echo -e "${CYAN}"
    echo "🧙‍♂️ Welcome to the Raspberry Pi Network Scanner!"
    echo -e "${NC}"
    
    check_dependencies
    scan_for_raspberry_pis "$NETWORK"
}

# Run the script
main "$@"