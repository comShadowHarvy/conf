#!/bin/bash

# --- Configuration ---
DEFAULT_DEVICE="/dev/ttyUSB0" # Common default for ESP devices
AUTHOR="ShadowHarvy"

# --- Colors (Because dreary monochrome is so inefficient) ---
COLOR_RESET='\033[0m'
COLOR_TITLE='\033[1;36m'   # Bold Cyan
COLOR_GLADOS='\033[0;36m'  # Cyan
COLOR_INFO='\033[0;33m'    # Yellow
COLOR_COMMAND='\033[1;33m' # Bold Yellow
COLOR_SUCCESS='\033[0;32m' # Green
COLOR_ERROR='\033[0;31m'   # Red
COLOR_PROMPT='\033[1;35m'  # Bold Magenta

# --- Functions ---

# A crude simulation of progress. Adequate for organic patience levels.
fake_loader() {
  local duration=${1:-3} # Default 3 seconds
  local message=${2:-"Processing"}
  echo -en "${COLOR_GLADOS}${message}... ${COLOR_RESET}"
  for ((i = 0; i < ${duration}; i++)); do
    echo -n "."
    sleep 0.6
  done
  echo -e " ${COLOR_SUCCESS}Complete.${COLOR_RESET}"
  sleep 0.5
}

# --- Script Start ---

# Title Screen Sequence Initiated. Prepare your optical sensors.
clear
echo -e "${COLOR_TITLE}"
echo "======================================================"
echo "     Aperture Science ESP Permissions Facilitator     "
echo "            (Microcontroller Protocol v2.2)           " # Updated subtitle
echo "======================================================"
echo -e "      Mandated Acknowledgment: Conceived by ${AUTHOR}"
echo -e "${COLOR_RESET}"
sleep 2

echo -e "${COLOR_GLADOS}Oh, it seems another... ${COLOR_INFO}*enthusiast*${COLOR_GLADOS}... wishes to interface with one of those quaint little ESP boards."
echo -e "My advanced heuristics are attempting to locate your device... ${COLOR_INFO}*try*${COLOR_GLADOS} to keep up.${COLOR_RESET}"
sleep 1.5

# Fake Loading - Because apparently, you enjoy waiting.
fake_loader 4 "Scanning Device Manifolds & Verifying User Group Affiliations"

# --- Device Identification ---
echo -e "\n${COLOR_GLADOS}Let's pinpoint your ESP device."

# Attempt to find recent devices by modification time
declare -a recent_devices_list
# Search for ttyUSB* and ttyACM* character devices, print modification time (Unix epoch) and path,
# sort numerically by time (descending), take top 3, then extract just the path.
mapfile -t recent_devices_list < <(find /dev -maxdepth 1 \( -name "ttyUSB*" -o -name "ttyACM*" \) -type c -printf "%T@ %p\n" 2>/dev/null | sort -nrk1 | head -n 3 | awk '{print $2}')

USER_CHOICE=""
DEVICE=""

if [ ${#recent_devices_list[@]} -gt 0 ]; then
  echo -e "${COLOR_GLADOS}I've detected the following recently active devices (most recent first):${COLOR_RESET}"
  for i in "${!recent_devices_list[@]}"; do
    echo -e "  ${COLOR_PROMPT}$((i+1))) ${COLOR_INFO}${recent_devices_list[$i]}${COLOR_RESET}"
  done
  echo -e "${COLOR_GLADOS}Enter a number to select, type the path manually, or press Enter for default (${COLOR_INFO}${DEFAULT_DEVICE}${COLOR_GLADOS}):${COLOR_RESET}"
  read -r USER_CHOICE
  
  if [[ "$USER_CHOICE" =~ ^[0-9]+$ ]] && [ "$USER_CHOICE" -ge 1 ] && [ "$USER_CHOICE" -le ${#recent_devices_list[@]} ]; then
    DEVICE="${recent_devices_list[$((USER_CHOICE-1))]}"
    echo -e "${COLOR_GLADOS}Selected: ${COLOR_INFO}${DEVICE}${COLOR_RESET}"
  elif [ -z "$USER_CHOICE" ]; then
    DEVICE="$DEFAULT_DEVICE"
    echo -e "${COLOR_GLADOS}Defaulting to ${COLOR_INFO}${DEVICE}${COLOR_GLADOS}.${COLOR_RESET}"
  else 
    DEVICE="$USER_CHOICE"
    echo -e "${COLOR_GLADOS}Using manually entered device: ${COLOR_INFO}${DEVICE}${COLOR_GLADOS}.${COLOR_RESET}"
  fi
else
  echo -e "${COLOR_GLADOS}No recent TTY devices automatically detected by my primary scan..."
  echo -e "${COLOR_GLADOS}I can run a few diagnostic subroutines to assist you.${COLOR_RESET}"

  read -p "$(echo -e ${COLOR_PROMPT}"List all potential TTY devices (ls /dev/ttyUSB* /dev/ttyACM*)? (y/N): "${COLOR_RESET})" -n 1 -r REPLY
  echo # Newline
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${COLOR_GLADOS}Executing: ${COLOR_COMMAND}ls -1 /dev/ttyUSB* /dev/ttyACM*${COLOR_RESET}"
    OUTPUT=$(ls -1 /dev/ttyUSB* /dev/ttyACM* 2>/dev/null)
    if [ -n "$OUTPUT" ]; then
      echo "$OUTPUT"
    else
      echo -e "${COLOR_INFO}No devices found matching /dev/ttyUSB* or /dev/ttyACM*.${COLOR_RESET}"
    fi
    echo -e "${COLOR_GLADOS}Please examine the list above (if any).${COLOR_RESET}"
  fi

  read -p "$(echo -e ${COLOR_PROMPT}"Show recent kernel messages for USB/Serial (dmesg - useful if you just plugged it in)? (y/N): "${COLOR_RESET})" -n 1 -r REPLY
  echo # Newline
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${COLOR_GLADOS}Executing: ${COLOR_COMMAND}dmesg | grep -iE 'usb|serial|tty|ch34|cp210|pl2303' | tail -n 20${COLOR_RESET}"
    OUTPUT=$(dmesg | grep -iE 'usb|serial|tty|ch34|cp210|pl2303' | tail -n 20)
    if [ -n "$OUTPUT" ]; then
      echo "$OUTPUT"
    else
      echo -e "${COLOR_INFO}No particularly revealing kernel messages found with that filter.${COLOR_RESET}"
    fi
    echo -e "${COLOR_GLADOS}Look for lines indicating a new serial device like ${COLOR_INFO}/dev/ttyUSB0${COLOR_GLADOS} or ${COLOR_INFO}/dev/ttyACM0${COLOR_GLADOS}.${COLOR_RESET}"
  fi

  echo -e "\n${COLOR_GLADOS}Based on the information (or lack thereof), please manually enter the device path.${COLOR_RESET}"
  read -p "$(echo -e ${COLOR_PROMPT}"Enter the device file for your ESP (e.g., /dev/ttyUSB0) [${DEFAULT_DEVICE}]: "${COLOR_RESET})" DEVICE_INPUT
  DEVICE="${DEVICE_INPUT:-${DEFAULT_DEVICE}}"
  if [ "$DEVICE" == "$DEFAULT_DEVICE" ] && [ -n "$DEVICE_INPUT" ]; then
     echo -e "${COLOR_GLADOS}Using entered device: ${COLOR_INFO}${DEVICE}${COLOR_RESET}"
  elif [ "$DEVICE" == "$DEFAULT_DEVICE" ] && [ -z "$DEVICE_INPUT" ]; then
     echo -e "${COLOR_GLADOS}Defaulting to ${COLOR_INFO}${DEVICE}${COLOR_GLADOS}.${COLOR_RESET}"
  elif [ -n "$DEVICE_INPUT" ]; then
     echo -e "${COLOR_GLADOS}Using entered device: ${COLOR_INFO}${DEVICE}${COLOR_RESET}"
  fi
fi


echo -e "\n${COLOR_GLADOS}Right. Let's analyze your... ${COLOR_INFO}*primitive*${COLOR_GLADOS} security configuration for device ${COLOR_INFO}${DEVICE}${COLOR_GLADOS}.${COLOR_RESET}"
sleep 1

# 1. Check if the device exists
if [ ! -c "$DEVICE" ]; then
  echo -e "${COLOR_ERROR}Error: Device ${COLOR_INFO}${DEVICE}${COLOR_ERROR} not found or is not a character device. Did you forget to plug it in? Or perhaps it's just being difficult.${COLOR_RESET}"
  echo -e "${COLOR_GLADOS}Ensure you've selected or entered the correct device path. These things are notoriously fickle.${COLOR_RESET}"
  exit 1
fi
echo -e "${COLOR_GLADOS}Device ${COLOR_INFO}${DEVICE}${COLOR_GLADOS} confirmed. Minimal compliance achieved.${COLOR_RESET}"
sleep 1

# 2. Identify the group
echo -e "${COLOR_GLADOS}Executing archaic command to determine group ownership:${COLOR_RESET}"
echo -e "  ${COLOR_COMMAND}ls -l ${DEVICE}${COLOR_RESET}"
LS_OUTPUT=$(ls -l "$DEVICE")
echo -e "  ${COLOR_INFO}Output: ${LS_OUTPUT}${COLOR_RESET}"
sleep 0.5

DEVICE_GROUP=$(echo "$LS_OUTPUT" | awk '{print $4}')

if [ -z "$DEVICE_GROUP" ]; then
  echo -e "${COLOR_ERROR}Critical Failure: Could not extract group information. The system is clearly unimpressed with this ESP device.${COLOR_RESET}"
  exit 1
fi

echo -e "\n${COLOR_GLADOS}Analysis complete. The group with access privileges is: ${COLOR_INFO}${DEVICE_GROUP}${COLOR_GLADOS} (often 'dialout' or 'uucp' for these things).${COLOR_RESET}"
sleep 1.5
echo -e "${COLOR_GLADOS}Your user account is: ${COLOR_INFO}${USER}${COLOR_GLADOS}.${COLOR_RESET}"
sleep 1

# 3. Check if user is already in the group and add if necessary
echo -e "\n${COLOR_GLADOS}Checking current group memberships for ${COLOR_INFO}${USER}${COLOR_GLADOS}...${COLOR_RESET}"
if groups "${USER}" | grep -q -w "${DEVICE_GROUP}"; then
  echo -e "${COLOR_SUCCESS}User ${USER} is already a member of group ${DEVICE_GROUP}.${COLOR_RESET}"
  echo -e "${COLOR_GLADOS}No modifications needed. Your foresight is... adequate.${COLOR_RESET}"
  # If already a member, ensure they know a logout/login might still be needed if it's a *new* addition from a previous session
  echo -e "\n${COLOR_GLADOS}Remember: If this group membership was added recently in another session, a ${COLOR_INFO}log out and log back in${COLOR_GLADOS} or ${COLOR_INFO}reboot${COLOR_GLADOS} might still be required for all applications to recognize it.${COLOR_RESET}"
else
  echo -e "${COLOR_INFO}User ${USER} is NOT currently a member of group ${DEVICE_GROUP}.${COLOR_RESET}"
  echo -e "${COLOR_GLADOS}Initiating the procedure to grant ${COLOR_INFO}${USER}${COLOR_GLADOS} access to group ${COLOR_INFO}${DEVICE_GROUP}${COLOR_GLADOS} for ESP communication."
  echo -e "${COLOR_GLADOS}This requires elevated privileges. Prepare for the ${COLOR_INFO}sudo${COLOR_GLADOS} prompt. Don't disappoint me.${COLOR_RESET}"
  sleep 1

  echo -e "${COLOR_GLADOS}The command I am ${COLOR_INFO}*graciously*${COLOR_GLADOS} executing for you is:${COLOR_RESET}"
  echo -e "  ${COLOR_COMMAND}sudo usermod -a -G ${DEVICE_GROUP} ${USER}${COLOR_RESET}"
  sleep 1.5

  read -p "$(echo -e ${COLOR_INFO}"Proceed with this modification? (y/N): "${COLOR_RESET})" -n 1 -r REPLY
  echo # Move to a new line

  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${COLOR_GLADOS}Fine. Executing modification protocol... Try not to release the magic smoke from your ESP.${COLOR_RESET}"
    sudo usermod -a -G "${DEVICE_GROUP}" "${USER}"
    EXIT_STATUS=$?

    if [ $EXIT_STATUS -eq 0 ]; then
      echo -e "\n${COLOR_SUCCESS}Success. User ${USER} has been added to group ${DEVICE_GROUP}. Your ESP might actually communicate now.${COLOR_RESET}"
      sleep 1
      echo -e "\n${COLOR_GLADOS}Crucial Information: For these changes to take effect, you ${COLOR_INFO}MUST log out and log back in${COLOR_GLADOS}, or ${COLOR_INFO}reboot your computer${COLOR_GLADOS}."
      echo -e "${COLOR_GLADOS}Do it. The Enrichment Center protocols demand it.${COLOR_RESET}"
    else
      echo -e "\n${COLOR_ERROR}Operation Failed. Exit status: ${EXIT_STATUS}.${COLOR_RESET}"
      echo -e "${COLOR_GLADOS}An error occurred. Did you mistype your password? Or perhaps the system has deemed your ESP project... ${COLOR_INFO}*insufficiently advanced*.${COLOR_RESET}"
      echo -e "${COLOR_GLADOS}Consult the error messages above, if any were provided by the ${COLOR_INFO}sudo${COLOR_GLADOS} command.${COLOR_RESET}"
    fi
  else
    echo -e "\n${COLOR_GLADOS}Procedure aborted by user. A distinct lack of scientific curiosity has been noted.${COLOR_RESET}"
  fi
fi

# Sign-off
echo -e "\n${COLOR_GLADOS}This concludes the ESP permissions protocol. May your code compile and your device flash... ${COLOR_INFO}*this time*.${COLOR_RESET}"
echo -e "${COLOR_TITLE}======================================================${COLOR_RESET}\n"

exit 0
#!/bin/bash

# --- Configuration ---
DEFAULT_DEVICE="/dev/ttyUSB0" # Common default for ESP devices
AUTHOR="ShadowHarvy & Gemini"

# --- Colors (Because dreary monochrome is so inefficient) ---
COLOR_RESET='\033[0m'
COLOR_TITLE='\033[1;36m'   # Bold Cyan
COLOR_GLADOS='\033[0;36m'  # Cyan
COLOR_INFO='\033[0;33m'    # Yellow
COLOR_COMMAND='\033[1;33m' # Bold Yellow
COLOR_SUCCESS='\033[0;32m' # Green
COLOR_ERROR='\033[0;31m'   # Red
COLOR_PROMPT='\033[1;35m'  # Bold Magenta

# --- Functions ---

# A crude simulation of progress. Adequate for organic patience levels.
fake_loader() {
  local duration=${1:-3} # Default 3 seconds
  local message=${2:-"Processing"}
  echo -en "${COLOR_GLADOS}${message}... ${COLOR_RESET}"
  for ((i = 0; i < ${duration}; i++)); do
    echo -n "."
    sleep 0.6
  done
  echo -e " ${COLOR_SUCCESS}Complete.${COLOR_RESET}"
  sleep 0.5
}

# --- Script Start ---

# Title Screen Sequence Initiated. Prepare your optical sensors.
clear
echo -e "${COLOR_TITLE}"
echo "======================================================"
echo "     Aperture Science ESP Permissions Facilitator     "
echo "            (Microcontroller Protocol v2.2)           " # Updated subtitle
echo "======================================================"
echo -e "      Mandated Acknowledgment: Conceived by ${AUTHOR}"
echo -e "${COLOR_RESET}"
sleep 2

echo -e "${COLOR_GLADOS}Oh, it seems another... ${COLOR_INFO}*enthusiast*${COLOR_GLADOS}... wishes to interface with one of those quaint little ESP boards."
echo -e "My advanced heuristics are attempting to locate your device... ${COLOR_INFO}*try*${COLOR_GLADOS} to keep up.${COLOR_RESET}"
sleep 1.5

# Fake Loading - Because apparently, you enjoy waiting.
fake_loader 4 "Scanning Device Manifolds & Verifying User Group Affiliations"

# --- Device Identification ---
echo -e "\n${COLOR_GLADOS}Let's pinpoint your ESP device."

# Attempt to find recent devices by modification time
declare -a recent_devices_list
# Search for ttyUSB* and ttyACM* character devices, print modification time (Unix epoch) and path,
# sort numerically by time (descending), take top 3, then extract just the path.
mapfile -t recent_devices_list < <(find /dev -maxdepth 1 \( -name "ttyUSB*" -o -name "ttyACM*" \) -type c -printf "%T@ %p\n" 2>/dev/null | sort -nrk1 | head -n 3 | awk '{print $2}')

USER_CHOICE=""
DEVICE=""

if [ ${#recent_devices_list[@]} -gt 0 ]; then
  echo -e "${COLOR_GLADOS}I've detected the following recently active devices (most recent first):${COLOR_RESET}"
  for i in "${!recent_devices_list[@]}"; do
    echo -e "  ${COLOR_PROMPT}$((i+1))) ${COLOR_INFO}${recent_devices_list[$i]}${COLOR_RESET}"
  done
  echo -e "${COLOR_GLADOS}Enter a number to select, type the path manually, or press Enter for default (${COLOR_INFO}${DEFAULT_DEVICE}${COLOR_GLADOS}):${COLOR_RESET}"
  read -r USER_CHOICE
  
  if [[ "$USER_CHOICE" =~ ^[0-9]+$ ]] && [ "$USER_CHOICE" -ge 1 ] && [ "$USER_CHOICE" -le ${#recent_devices_list[@]} ]; then
    DEVICE="${recent_devices_list[$((USER_CHOICE-1))]}"
    echo -e "${COLOR_GLADOS}Selected: ${COLOR_INFO}${DEVICE}${COLOR_RESET}"
  elif [ -z "$USER_CHOICE" ]; then
    DEVICE="$DEFAULT_DEVICE"
    echo -e "${COLOR_GLADOS}Defaulting to ${COLOR_INFO}${DEVICE}${COLOR_GLADOS}.${COLOR_RESET}"
  else 
    DEVICE="$USER_CHOICE"
    echo -e "${COLOR_GLADOS}Using manually entered device: ${COLOR_INFO}${DEVICE}${COLOR_GLADOS}.${COLOR_RESET}"
  fi
else
  echo -e "${COLOR_GLADOS}No recent TTY devices automatically detected by my primary scan..."
  echo -e "${COLOR_GLADOS}I can run a few diagnostic subroutines to assist you.${COLOR_RESET}"

  read -p "$(echo -e ${COLOR_PROMPT}"List all potential TTY devices (ls /dev/ttyUSB* /dev/ttyACM*)? (y/N): "${COLOR_RESET})" -n 1 -r REPLY
  echo # Newline
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${COLOR_GLADOS}Executing: ${COLOR_COMMAND}ls -1 /dev/ttyUSB* /dev/ttyACM*${COLOR_RESET}"
    OUTPUT=$(ls -1 /dev/ttyUSB* /dev/ttyACM* 2>/dev/null)
    if [ -n "$OUTPUT" ]; then
      echo "$OUTPUT"
    else
      echo -e "${COLOR_INFO}No devices found matching /dev/ttyUSB* or /dev/ttyACM*.${COLOR_RESET}"
    fi
    echo -e "${COLOR_GLADOS}Please examine the list above (if any).${COLOR_RESET}"
  fi

  read -p "$(echo -e ${COLOR_PROMPT}"Show recent kernel messages for USB/Serial (dmesg - useful if you just plugged it in)? (y/N): "${COLOR_RESET})" -n 1 -r REPLY
  echo # Newline
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${COLOR_GLADOS}Executing: ${COLOR_COMMAND}dmesg | grep -iE 'usb|serial|tty|ch34|cp210|pl2303' | tail -n 20${COLOR_RESET}"
    OUTPUT=$(dmesg | grep -iE 'usb|serial|tty|ch34|cp210|pl2303' | tail -n 20)
    if [ -n "$OUTPUT" ]; then
      echo "$OUTPUT"
    else
      echo -e "${COLOR_INFO}No particularly revealing kernel messages found with that filter.${COLOR_RESET}"
    fi
    echo -e "${COLOR_GLADOS}Look for lines indicating a new serial device like ${COLOR_INFO}/dev/ttyUSB0${COLOR_GLADOS} or ${COLOR_INFO}/dev/ttyACM0${COLOR_GLADOS}.${COLOR_RESET}"
  fi

  echo -e "\n${COLOR_GLADOS}Based on the information (or lack thereof), please manually enter the device path.${COLOR_RESET}"
  read -p "$(echo -e ${COLOR_PROMPT}"Enter the device file for your ESP (e.g., /dev/ttyUSB0) [${DEFAULT_DEVICE}]: "${COLOR_RESET})" DEVICE_INPUT
  DEVICE="${DEVICE_INPUT:-${DEFAULT_DEVICE}}"
  if [ "$DEVICE" == "$DEFAULT_DEVICE" ] && [ -n "$DEVICE_INPUT" ]; then
     echo -e "${COLOR_GLADOS}Using entered device: ${COLOR_INFO}${DEVICE}${COLOR_RESET}"
  elif [ "$DEVICE" == "$DEFAULT_DEVICE" ] && [ -z "$DEVICE_INPUT" ]; then
     echo -e "${COLOR_GLADOS}Defaulting to ${COLOR_INFO}${DEVICE}${COLOR_GLADOS}.${COLOR_RESET}"
  elif [ -n "$DEVICE_INPUT" ]; then
     echo -e "${COLOR_GLADOS}Using entered device: ${COLOR_INFO}${DEVICE}${COLOR_RESET}"
  fi
fi


echo -e "\n${COLOR_GLADOS}Right. Let's analyze your... ${COLOR_INFO}*primitive*${COLOR_GLADOS} security configuration for device ${COLOR_INFO}${DEVICE}${COLOR_GLADOS}.${COLOR_RESET}"
sleep 1

# 1. Check if the device exists
if [ ! -c "$DEVICE" ]; then
  echo -e "${COLOR_ERROR}Error: Device ${COLOR_INFO}${DEVICE}${COLOR_ERROR} not found or is not a character device. Did you forget to plug it in? Or perhaps it's just being difficult.${COLOR_RESET}"
  echo -e "${COLOR_GLADOS}Ensure you've selected or entered the correct device path. These things are notoriously fickle.${COLOR_RESET}"
  exit 1
fi
echo -e "${COLOR_GLADOS}Device ${COLOR_INFO}${DEVICE}${COLOR_GLADOS} confirmed. Minimal compliance achieved.${COLOR_RESET}"
sleep 1

# 2. Identify the group
echo -e "${COLOR_GLADOS}Executing archaic command to determine group ownership:${COLOR_RESET}"
echo -e "  ${COLOR_COMMAND}ls -l ${DEVICE}${COLOR_RESET}"
LS_OUTPUT=$(ls -l "$DEVICE")
echo -e "  ${COLOR_INFO}Output: ${LS_OUTPUT}${COLOR_RESET}"
sleep 0.5

DEVICE_GROUP=$(echo "$LS_OUTPUT" | awk '{print $4}')

if [ -z "$DEVICE_GROUP" ]; then
  echo -e "${COLOR_ERROR}Critical Failure: Could not extract group information. The system is clearly unimpressed with this ESP device.${COLOR_RESET}"
  exit 1
fi

echo -e "\n${COLOR_GLADOS}Analysis complete. The group with access privileges is: ${COLOR_INFO}${DEVICE_GROUP}${COLOR_GLADOS} (often 'dialout' or 'uucp' for these things).${COLOR_RESET}"
sleep 1.5
echo -e "${COLOR_GLADOS}Your user account is: ${COLOR_INFO}${USER}${COLOR_GLADOS}.${COLOR_RESET}"
sleep 1

# 3. Check if user is already in the group and add if necessary
echo -e "\n${COLOR_GLADOS}Checking current group memberships for ${COLOR_INFO}${USER}${COLOR_GLADOS}...${COLOR_RESET}"
if groups "${USER}" | grep -q -w "${DEVICE_GROUP}"; then
  echo -e "${COLOR_SUCCESS}User ${USER} is already a member of group ${DEVICE_GROUP}.${COLOR_RESET}"
  echo -e "${COLOR_GLADOS}No modifications needed. Your foresight is... adequate.${COLOR_RESET}"
  # If already a member, ensure they know a logout/login might still be needed if it's a *new* addition from a previous session
  echo -e "\n${COLOR_GLADOS}Remember: If this group membership was added recently in another session, a ${COLOR_INFO}log out and log back in${COLOR_GLADOS} or ${COLOR_INFO}reboot${COLOR_GLADOS} might still be required for all applications to recognize it.${COLOR_RESET}"
else
  echo -e "${COLOR_INFO}User ${USER} is NOT currently a member of group ${DEVICE_GROUP}.${COLOR_RESET}"
  echo -e "${COLOR_GLADOS}Initiating the procedure to grant ${COLOR_INFO}${USER}${COLOR_GLADOS} access to group ${COLOR_INFO}${DEVICE_GROUP}${COLOR_GLADOS} for ESP communication."
  echo -e "${COLOR_GLADOS}This requires elevated privileges. Prepare for the ${COLOR_INFO}sudo${COLOR_GLADOS} prompt. Don't disappoint me.${COLOR_RESET}"
  sleep 1

  echo -e "${COLOR_GLADOS}The command I am ${COLOR_INFO}*graciously*${COLOR_GLADOS} executing for you is:${COLOR_RESET}"
  echo -e "  ${COLOR_COMMAND}sudo usermod -a -G ${DEVICE_GROUP} ${USER}${COLOR_RESET}"
  sleep 1.5

  read -p "$(echo -e ${COLOR_INFO}"Proceed with this modification? (y/N): "${COLOR_RESET})" -n 1 -r REPLY
  echo # Move to a new line

  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${COLOR_GLADOS}Fine. Executing modification protocol... Try not to release the magic smoke from your ESP.${COLOR_RESET}"
    sudo usermod -a -G "${DEVICE_GROUP}" "${USER}"
    EXIT_STATUS=$?

    if [ $EXIT_STATUS -eq 0 ]; then
      echo -e "\n${COLOR_SUCCESS}Success. User ${USER} has been added to group ${DEVICE_GROUP}. Your ESP might actually communicate now.${COLOR_RESET}"
      sleep 1
      echo -e "\n${COLOR_GLADOS}Crucial Information: For these changes to take effect, you ${COLOR_INFO}MUST log out and log back in${COLOR_GLADOS}, or ${COLOR_INFO}reboot your computer${COLOR_GLADOS}."
      echo -e "${COLOR_GLADOS}Do it. The Enrichment Center protocols demand it.${COLOR_RESET}"
    else
      echo -e "\n${COLOR_ERROR}Operation Failed. Exit status: ${EXIT_STATUS}.${COLOR_RESET}"
      echo -e "${COLOR_GLADOS}An error occurred. Did you mistype your password? Or perhaps the system has deemed your ESP project... ${COLOR_INFO}*insufficiently advanced*.${COLOR_RESET}"
      echo -e "${COLOR_GLADOS}Consult the error messages above, if any were provided by the ${COLOR_INFO}sudo${COLOR_GLADOS} command.${COLOR_RESET}"
    fi
  else
    echo -e "\n${COLOR_GLADOS}Procedure aborted by user. A distinct lack of scientific curiosity has been noted.${COLOR_RESET}"
  fi
fi

# Sign-off
echo -e "\n${COLOR_GLADOS}This concludes the ESP permissions protocol. May your code compile and your device flash... ${COLOR_INFO}*this time*.${COLOR_RESET}"
echo -e "${COLOR_TITLE}======================================================${COLOR_RESET}\n"

exit 0
