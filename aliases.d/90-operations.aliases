# ------------------------------------------------------------------
# Module: operations
# Loaded when: always
# Depends: none
# ------------------------------------------------------------------

# Modern File Operations & Analysis
# ----------------------------------------------------------------------------

# Enhanced file analysis
fileinfo() {
  [[ -z "$1" ]] && { echo "Usage: fileinfo <file>" >&2; return 1; }
  local file="$1"
  [[ ! -e "$file" ]] && { echo "Error: File '$file' not found." >&2; return 1; }
  
  echo "üìÑ File Information: $file"
  echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
  echo "üìä Type: $(file "$file" | cut -d: -f2-)"
  echo "üìè Size: $(du -h "$file" | cut -f1)"
  echo "üìÖ Modified: $(stat -c %y "$file" 2>/dev/null || stat -f %Sm "$file")"
  echo "üîí Permissions: $(stat -c %A "$file" 2>/dev/null || stat -f %Sp "$file")"
  
  if [[ -f "$file" ]]; then
    echo "üìù Lines: $(wc -l < "$file" 2>/dev/null || echo "N/A")"
    echo "üî§ Words: $(wc -w < "$file" 2>/dev/null || echo "N/A")"
    [[ "$file" == *.md || "$file" == *.txt ]] && echo "üìñ Characters: $(wc -c < "$file")"
  fi
}

# Smart search across different file types
search() {
  [[ -z "$1" ]] && { echo "Usage: search <pattern> [path] [--type=ext]" >&2; return 1; }
  local pattern="$1" path="${2:-.}" type_filter=""
  
  # Parse type filter if provided
  for arg in "$@"; do
    if [[ "$arg" == --type=* ]]; then
      type_filter="--type=${arg#*=}"
    fi
  done
  
  echo "üîç Searching for '$pattern' in $path"
  
  if command -v rg &>/dev/null; then
    rg --color=always --line-number --heading --smart-case $type_filter "$pattern" "$path"
  else
    find "$path" -type f -exec grep -l "$pattern" {} + 2>/dev/null
  fi
}

# ----------------------------------------------------------------------------
# Productivity & Workflow Enhancements
# ----------------------------------------------------------------------------

# Enhanced system monitoring
watch-system() {
  local interval="${1:-2}"
  watch -n "$interval" 'echo "=== CPU Usage ===" && grep "cpu MHz" /proc/cpuinfo | head -4; 
  echo -e "\n=== Memory Usage ===" && free -h;
  echo -e "\n=== Disk Usage ===" && df -h / /home 2>/dev/null | tail -2;
  echo -e "\n=== Load Average ===" && uptime;
  echo -e "\n=== Top Processes ===" && ps aux --sort=-%cpu | head -6'
}

# Smart directory jumping with history
if command -v zoxide &>/dev/null; then
  alias j='z'  # Jump to frequent directories
  alias ji='zi' # Interactive jump
fi

# Session management
save-session() {
  local session_name="${1:-default}"
  local session_file="$HOME/.shell_sessions/$session_name"
  mkdir -p "$(dirname "$session_file")"
  
  {
    echo "# Shell session saved: $(date)"
    echo "cd '$PWD'"
    history | tail -20 | sed 's/^[[:space:]]*[0-9]*[[:space:]]*//'
  } > "$session_file"
  
  echo "üìÅ Session '$session_name' saved to $session_file"
}

load-session() {
  local session_name="${1:-default}"
  local session_file="$HOME/.shell_sessions/$session_name"
  
  [[ -f "$session_file" ]] && source "$session_file" && echo "üìÇ Session '$session_name' loaded" || echo "‚ùå Session '$session_name' not found"
}

list-sessions() {
  local sessions_dir="$HOME/.shell_sessions"
  [[ -d "$sessions_dir" ]] && ls -1 "$sessions_dir" || echo "No saved sessions found"
}

# ----------------------------------------------------------------------------
# System Maintenance & Utilities
# ----------------------------------------------------------------------------

# Comprehensive system update for CachyOS
full-update() {
  echo "üöÄ Starting comprehensive system update..."
  
  # Update package databases and system
  if command -v paru &>/dev/null; then
    echo "üì¶ Updating system with paru..."
    paru -Syu
  else
    echo "üì¶ Updating system with pacman..."
    sudo pacman -Syu
  fi
  
  # Update Flatpaks if available
  if command -v flatpak &>/dev/null; then
    echo "üì± Updating Flatpak applications..."
    flatpak update -y
  fi
  
  # Clean up package cache
  echo "üßπ Cleaning package cache..."
  if command -v paru &>/dev/null; then
    paru -Sc --noconfirm
  else
    sudo pacman -Sc --noconfirm  
  fi
  
  # Remove orphaned packages
  echo "üóëÔ∏è  Removing orphaned packages..."
  local orphans
  orphans=$(pacman -Qtdq)
  [[ -n "$orphans" ]] && sudo pacman -Rns --noconfirm $orphans || echo "No orphaned packages found"
  
  # Trim SSDs if available
  if command -v fstrim &>/dev/null; then
    echo "‚úÇÔ∏è  Trimming SSDs..."
    sudo fstrim -av
  fi
  
  echo "‚úÖ System update complete!"
}

# Quick system health check
syshealth() {
  echo "üè• System Health Check"
  echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
  
  # Disk space check
  echo "üíæ Disk Usage:"
  df -h / /home 2>/dev/null | awk 'NR>1 {print "  " $6 ": " $3 "/" $2 " (" $5 " used)"}'  
  
  # Memory usage
  echo -e "\nüß† Memory Usage:"
  free -h | awk 'NR==2{printf "  RAM: %s/%s (%.0f%% used)\n", $3,$2,($3/$2)*100}'
  
  # Load average
  echo -e "\n‚ö° Load Average:"
  uptime | awk -F'load average:' '{print "  " $2}'
  
  # Failed systemd services
  echo -e "\nüîß Failed Services:"
  local failed_services
  failed_services=$(systemctl --failed --no-legend --no-pager -q)
  [[ -n "$failed_services" ]] && echo "$failed_services" || echo "  ‚úÖ No failed services"
  
  # Temperature check
  if command -v sensors &>/dev/null; then
    echo -e "\nüå°Ô∏è  Temperature:"
    sensors | grep -E "(Core|Package|Tctl)" | head -3 | sed 's/^/  /'
  fi
  
  echo -e "\nüìä System Status: $(systemctl is-system-running)"
}

# ----------------------------------------------------------------------------
# Modern Development Shortcuts
# ----------------------------------------------------------------------------

# Language version managers
if command -v node &>/dev/null; then
  alias node-version='node --version && npm --version'
fi

if command -v python3 &>/dev/null; then
  alias py-version='python3 --version && pip --version'
  alias venv-create='python3 -m venv venv && source venv/bin/activate'
  alias venv-activate='source venv/bin/activate || source .venv/bin/activate'
fi

# Docker shortcuts (enhanced)
if command -v docker &>/dev/null; then
  alias docker-clean='docker system prune -af && docker volume prune -f'
  alias docker-stats='docker stats --no-stream'
  alias docker-top='docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"'
fi

# Modern alternatives with fallbacks
command -v delta &>/dev/null && alias diff='delta'
command -v tldr &>/dev/null && alias help='tldr'
command -v hyperfine &>/dev/null && alias benchmark='hyperfine'

# ----------------------------------------------------------------------------
# Neovim Configuration Management (Lazyman Compatible)
# ----------------------------------------------------------------------------

# Multiple Neovim configurations support
if command -v nvim &>/dev/null; then
  # Default nvim (your main config)
  alias nvim-default='nvim'
  alias nv='nvim'  # Quick shortcut
  
  # Base configurations - Well tested, full-featured distributions
  alias abstract='NVIM_APPNAME=nvim-Abstract nvim'           # Abstract
  alias astronvimplus='NVIM_APPNAME=nvim-AstroNvimPlus nvim' # AstroNvimPlus
  alias basicide='NVIM_APPNAME=nvim-BasicIde nvim'           # Basic IDE
  alias ecovim='NVIM_APPNAME=nvim-Ecovim nvim'               # Ecovim
  alias lazyvim='NVIM_APPNAME=nvim-LazyVim nvim'             # LazyVim
  alias lunarvim='NVIM_APPNAME=nvim-LunarVim nvim'           # LunarVim
  alias lvim='NVIM_APPNAME=nvim-LunarVim nvim'               # LunarVim alias
  alias magicvim='NVIM_APPNAME=nvim-MagicVim nvim'           # MagicVim
  alias nvchad='NVIM_APPNAME=nvim-NvChad nvim'               # NvChad
  alias spacevim='NVIM_APPNAME=nvim-SpaceVim nvim'           # SpaceVim
  
  # Language configurations - Tailored for specific languages
  alias alanvim='NVIM_APPNAME=nvim-AlanVim nvim'             # AlanVim (Go)
  alias allaman='NVIM_APPNAME=nvim-Allaman nvim'             # Allaman (multi-language)
  alias catnvim='NVIM_APPNAME=nvim-CatNvim nvim'             # CatNvim
  alias cppvim='NVIM_APPNAME=nvim-Cpp nvim'                  # C/C++ config
  alias govim='NVIM_APPNAME=nvim-Go nvim'                    # Go config
  alias go2one='NVIM_APPNAME=nvim-Go2one nvim'               # Go2one
  alias insis='NVIM_APPNAME=nvim-Insis nvim'                 # Insis
  alias knvim='NVIM_APPNAME=nvim-Knvim nvim'                 # Knvim (Kotlin)
  alias latexvim='NVIM_APPNAME=nvim-LaTeX nvim'              # LaTeX config
  alias lazyide='NVIM_APPNAME=nvim-LazyIde nvim'             # LazyIde
  alias lunaride='NVIM_APPNAME=nvim-LunarIde nvim'           # LunarIde
  alias lvimide='NVIM_APPNAME=nvim-LvimIde nvim'             # LvimIde
  alias magidc='NVIM_APPNAME=nvim-Magidc nvim'               # Magidc (C/C++)
  alias nvlang='NVIM_APPNAME=nvim-Nv nvim'                   # Nv (language-focused)
  alias nv-ide='NVIM_APPNAME=nvim-NV-IDE nvim'               # NV-IDE
  alias orange='NVIM_APPNAME=nvim-Orange nvim'               # Orange
  alias pythonvim='NVIM_APPNAME=nvim-Python nvim'           # Python config
  alias rustvim='NVIM_APPNAME=nvim-Rust nvim'                # Rust config
  alias salevim='NVIM_APPNAME=nvim-SaleVim nvim'             # SaleVim
  alias shuvro='NVIM_APPNAME=nvim-Shuvro nvim'               # Shuvro
  alias webdev='NVIM_APPNAME=nvim-Webdev nvim'               # Webdev
  
  # Personal configurations - Personal configs with interesting features
  alias adib='NVIM_APPNAME=nvim-Adib nvim'                   # Adib
  alias ahsan='NVIM_APPNAME=nvim-Ahsan nvim'                 # Ahsan
  alias artur='NVIM_APPNAME=nvim-Artur nvim'                 # Artur
  alias beethoven='NVIM_APPNAME=nvim-Beethoven nvim'         # Beethoven
  alias brain='NVIM_APPNAME=nvim-Brain nvim'                 # Brain
  alias charles='NVIM_APPNAME=nvim-Charles nvim'             # Charles
  alias chokerman='NVIM_APPNAME=nvim-Chokerman nvim'         # Chokerman
  alias craftzdog='NVIM_APPNAME=nvim-Craftzdog nvim'         # Craftzdog
  alias dillon='NVIM_APPNAME=nvim-Dillon nvim'               # Dillon
  alias elianiva='NVIM_APPNAME=nvim-Elianiva nvim'           # Elianiva
  alias elijah='NVIM_APPNAME=nvim-Elijah nvim'               # Elijah
  alias enrique='NVIM_APPNAME=nvim-Enrique nvim'             # Enrique
  alias heiker='NVIM_APPNAME=nvim-Heiker nvim'               # Heiker
  alias j4de='NVIM_APPNAME=nvim-J4de nvim'                   # J4de
  alias jdhao='NVIM_APPNAME=nvim-Jdhao nvim'                 # Jdhao
  alias josean='NVIM_APPNAME=nvim-Josean nvim'               # Josean
  alias justinnvim='NVIM_APPNAME=nvim-JustinNvim nvim'       # JustinNvim
  alias kodo='NVIM_APPNAME=nvim-Kodo nvim'                   # Kodo
  alias kristijan='NVIM_APPNAME=nvim-Kristijan nvim'         # Kristijan
  alias lamarvim='NVIM_APPNAME=nvim-LamarVim nvim'           # LamarVim
  alias maddison='NVIM_APPNAME=nvim-Maddison nvim'           # Maddison
  alias metis='NVIM_APPNAME=nvim-Metis nvim'                 # Metis
  alias mini='NVIM_APPNAME=nvim-Mini nvim'                   # Mini
  alias onmyway='NVIM_APPNAME=nvim-OnMyWay nvim'             # OnMyWay
  alias onno='NVIM_APPNAME=nvim-ONNO nvim'                   # ONNO
  alias optixal='NVIM_APPNAME=nvim-Optixal nvim'             # Optixal
  alias orhun='NVIM_APPNAME=nvim-Orhun nvim'                 # Orhun
  alias primeagen='NVIM_APPNAME=nvim-Primeagen nvim'         # Primeagen
  alias rafi='NVIM_APPNAME=nvim-Rafi nvim'                   # Rafi
  alias rnvim='NVIM_APPNAME=nvim-RNvim nvim'                 # RNvim
  alias roiz='NVIM_APPNAME=nvim-Roiz nvim'                   # Roiz
  alias seniormars='NVIM_APPNAME=nvim-SeniorMars nvim'       # SeniorMars
  alias simple='NVIM_APPNAME=nvim-Simple nvim'               # Simple
  alias slydragonn='NVIM_APPNAME=nvim-Slydragonn nvim'       # Slydragonn
  alias spider='NVIM_APPNAME=nvim-Spider nvim'               # Spider
  alias traap='NVIM_APPNAME=nvim-Traap nvim'                 # Traap
  alias vimacs='NVIM_APPNAME=nvim-Vimacs nvim'               # Vimacs
  alias wuelner='NVIM_APPNAME=nvim-Wuelner nvim'             # Wuelner
  alias xero='NVIM_APPNAME=nvim-xero nvim'                   # xero
  alias xiao='NVIM_APPNAME=nvim-Xiao nvim'                   # Xiao
  
  # Starter configurations - Great starting points for custom configs
  alias astronvimstart='NVIM_APPNAME=nvim-AstroNvimStart nvim'  # AstroNvimStart
  alias barebones='NVIM_APPNAME=nvim-Barebones nvim'            # Barebones
  alias basic='NVIM_APPNAME=nvim-Basic nvim'                    # Basic
  alias codeart='NVIM_APPNAME=nvim-CodeArt nvim'                # CodeArt
  alias cosmic='NVIM_APPNAME=nvim-Cosmic nvim'                  # CosmicNvim
  alias ember='NVIM_APPNAME=nvim-Ember nvim'                    # Ember
  alias fennel='NVIM_APPNAME=nvim-Fennel nvim'                  # Fennel
  alias hardhacker='NVIM_APPNAME=nvim-HardHacker nvim'          # HardHacker
  alias justinohmy='NVIM_APPNAME=nvim-JustinOhMy nvim'          # JustinOhMy
  alias kickstart='NVIM_APPNAME=nvim-Kickstart nvim'            # Kickstart.nvim
  alias kickstartpython='NVIM_APPNAME=nvim-KickstartPython nvim' # KickstartPython
  alias kabin='NVIM_APPNAME=nvim-Kabin nvim'                     # Kabin
  alias micah='NVIM_APPNAME=nvim-Micah nvim'                     # Micah
  alias modern='NVIM_APPNAME=nvim-Modern nvim'                  # Modern
  alias normal='NVIM_APPNAME=nvim-Normal nvim'                  # Normal
  alias nvim2k='NVIM_APPNAME=nvim-2k nvim'                      # nvim2k
  alias nvpak='NVIM_APPNAME=nvim-NvPak nvim'                    # NvPak
  alias pde='NVIM_APPNAME=nvim-pde nvim'                        # PDE
  alias rohit='NVIM_APPNAME=nvim-Rohit nvim'                    # Rohit
  alias scratch='NVIM_APPNAME=nvim-Scratch nvim'                # Scratch
  alias singlefile='NVIM_APPNAME=nvim-SingleFile nvim'          # SingleFile
  
  # VonHeikemen starter configurations - From the LSP Zero author
  alias basiclsp='NVIM_APPNAME=nvim-BasicLsp nvim'              # BasicLsp
  alias basicmason='NVIM_APPNAME=nvim-BasicMason nvim'          # BasicMason
  alias extralight='NVIM_APPNAME=nvim-Extralight nvim'          # Extralight
  alias lspcmp='NVIM_APPNAME=nvim-LspCmp nvim'                  # LspCmp
  alias minimal='NVIM_APPNAME=nvim-Minimal nvim'                # Minimal
  alias modular='NVIM_APPNAME=nvim-Modular nvim'                # Modular
  alias opinion='NVIM_APPNAME=nvim-Opinion nvim'                # Opinionated
  alias startbase='NVIM_APPNAME=nvim-StartBase nvim'            # StartBase
  alias startlsp='NVIM_APPNAME=nvim-StartLsp nvim'              # StartLsp
  alias startmason='NVIM_APPNAME=nvim-StartMason nvim'          # StartMason
  
  # Special Lazyman configuration
  alias lazyman='NVIM_APPNAME=nvim-Lazyman nvim'                # Lazyman itself
  
  # Configuration management functions
  nvim-switch() {
    [[ -z "$1" ]] && {
      echo "üîß Available Neovim configurations (Lazyman compatible):"
      echo ""
      echo "üîµ Base Configurations (Well-tested, full-featured):"
      echo "  abstract, astronvimplus, basicide, ecovim, lazyvim, lunarvim (lvim)"
      echo "  magicvim, nvchad, spacevim"
      echo ""
      echo "üî¥ Language Configurations (Language-specific):"
      echo "  alanvim, allaman, catnvim, cppvim, govim, go2one, insis, knvim"
      echo "  latexvim, lazyide, lunaride, lvimide, magidc, nvlang, nv-ide"
      echo "  orange, pythonvim, rustvim, salevim, shuvro, webdev"
      echo ""
      echo "üü° Personal Configurations (Interesting personal setups):"
      echo "  adib, ahsan, artur, beethoven, brain, charles, chokerman, craftzdog"
      echo "  dillon, elianiva, elijah, enrique, heiker, j4de, jdhao, josean"
      echo "  justinnvim, kodo, kristijan, lamarvim, maddison, metis, mini"
      echo "  onmyway, onno, optixal, orhun, primeagen, rafi, rnvim, roiz"
      echo "  seniormars, simple, slydragonn, spider, traap, vimacs, wuelner, xero, xiao"
      echo ""
      echo "üü¢ Starter Configurations (Great starting points):"
      echo "  astronvimstart, barebones, basic, codeart, cosmic, ember, fennel"
      echo "  hardhacker, justinohmy, kickstart, kickstartpython, kabin, micah"
      echo "  modern, normal, nvim2k, nvpak, pde, rohit, scratch, singlefile"
      echo ""
      echo "üü£ VonHeikemen Starters (From LSP Zero author):"
      echo "  basiclsp, basicmason, extralight, lspcmp, minimal, modular"
      echo "  opinion, startbase, startlsp, startmason"
      echo ""
      echo "üéÜ Special:"
      echo "  lazyman        - The Lazyman configuration itself"
      echo "  nvim-default   - Your default configuration"
      echo ""
      echo "üìñ Usage: nvim-switch <config_name> [file]"
      echo "üí° Example: nvim-switch lazyvim myfile.lua"
      echo "üìù Note: These configs should be installed via lazyman first"
      return 1
    }
    
    local config="$1"
    shift  # Remove first argument, keep the rest for nvim
    
    case "$config" in
      # Default
      "default")        nvim "$@" ;;
      
      # Base configurations
      "abstract")       NVIM_APPNAME=nvim-Abstract nvim "$@" ;;
      "astronvimplus")  NVIM_APPNAME=nvim-AstroNvimPlus nvim "$@" ;;
      "basicide")       NVIM_APPNAME=nvim-BasicIde nvim "$@" ;;
      "ecovim")         NVIM_APPNAME=nvim-Ecovim nvim "$@" ;;
      "lazyvim")        NVIM_APPNAME=nvim-LazyVim nvim "$@" ;;
      "lunarvim"|"lvim") NVIM_APPNAME=nvim-LunarVim nvim "$@" ;;
      "magicvim")       NVIM_APPNAME=nvim-MagicVim nvim "$@" ;;
      "nvchad")         NVIM_APPNAME=nvim-NvChad nvim "$@" ;;
      "spacevim")       NVIM_APPNAME=nvim-SpaceVim nvim "$@" ;;
      
      # Language configurations
      "alanvim")        NVIM_APPNAME=nvim-AlanVim nvim "$@" ;;
      "allaman")        NVIM_APPNAME=nvim-Allaman nvim "$@" ;;
      "catnvim")        NVIM_APPNAME=nvim-CatNvim nvim "$@" ;;
      "cppvim")         NVIM_APPNAME=nvim-Cpp nvim "$@" ;;
      "govim")          NVIM_APPNAME=nvim-Go nvim "$@" ;;
      "go2one")         NVIM_APPNAME=nvim-Go2one nvim "$@" ;;
      "insis")          NVIM_APPNAME=nvim-Insis nvim "$@" ;;
      "knvim")          NVIM_APPNAME=nvim-Knvim nvim "$@" ;;
      "latexvim")       NVIM_APPNAME=nvim-LaTeX nvim "$@" ;;
      "lazyide")        NVIM_APPNAME=nvim-LazyIde nvim "$@" ;;
      "lunaride")       NVIM_APPNAME=nvim-LunarIde nvim "$@" ;;
      "lvimide")        NVIM_APPNAME=nvim-LvimIde nvim "$@" ;;
      "magidc")         NVIM_APPNAME=nvim-Magidc nvim "$@" ;;
      "nvlang")         NVIM_APPNAME=nvim-Nv nvim "$@" ;;
      "nv-ide")         NVIM_APPNAME=nvim-NV-IDE nvim "$@" ;;
      "orange")         NVIM_APPNAME=nvim-Orange nvim "$@" ;;
      "pythonvim")      NVIM_APPNAME=nvim-Python nvim "$@" ;;
      "rustvim")        NVIM_APPNAME=nvim-Rust nvim "$@" ;;
      "salevim")        NVIM_APPNAME=nvim-SaleVim nvim "$@" ;;
      "shuvro")         NVIM_APPNAME=nvim-Shuvro nvim "$@" ;;
      "webdev")         NVIM_APPNAME=nvim-Webdev nvim "$@" ;;
      
      # Personal configurations
      "adib")           NVIM_APPNAME=nvim-Adib nvim "$@" ;;
      "ahsan")          NVIM_APPNAME=nvim-Ahsan nvim "$@" ;;
      "artur")          NVIM_APPNAME=nvim-Artur nvim "$@" ;;
      "beethoven")      NVIM_APPNAME=nvim-Beethoven nvim "$@" ;;
      "brain")          NVIM_APPNAME=nvim-Brain nvim "$@" ;;
      "charles")        NVIM_APPNAME=nvim-Charles nvim "$@" ;;
      "chokerman")      NVIM_APPNAME=nvim-Chokerman nvim "$@" ;;
      "craftzdog")      NVIM_APPNAME=nvim-Craftzdog nvim "$@" ;;
      "dillon")         NVIM_APPNAME=nvim-Dillon nvim "$@" ;;
      "elianiva")       NVIM_APPNAME=nvim-Elianiva nvim "$@" ;;
      "elijah")         NVIM_APPNAME=nvim-Elijah nvim "$@" ;;
      "enrique")        NVIM_APPNAME=nvim-Enrique nvim "$@" ;;
      "heiker")         NVIM_APPNAME=nvim-Heiker nvim "$@" ;;
      "j4de")           NVIM_APPNAME=nvim-J4de nvim "$@" ;;
      "jdhao")          NVIM_APPNAME=nvim-Jdhao nvim "$@" ;;
      "josean")         NVIM_APPNAME=nvim-Josean nvim "$@" ;;
      "justinnvim")     NVIM_APPNAME=nvim-JustinNvim nvim "$@" ;;
      "kodo")           NVIM_APPNAME=nvim-Kodo nvim "$@" ;;
      "kristijan")      NVIM_APPNAME=nvim-Kristijan nvim "$@" ;;
      "lamarvim")       NVIM_APPNAME=nvim-LamarVim nvim "$@" ;;
      "maddison")       NVIM_APPNAME=nvim-Maddison nvim "$@" ;;
      "metis")          NVIM_APPNAME=nvim-Metis nvim "$@" ;;
      "mini")           NVIM_APPNAME=nvim-Mini nvim "$@" ;;
      "onmyway")        NVIM_APPNAME=nvim-OnMyWay nvim "$@" ;;
      "onno")           NVIM_APPNAME=nvim-ONNO nvim "$@" ;;
      "optixal")        NVIM_APPNAME=nvim-Optixal nvim "$@" ;;
      "orhun")          NVIM_APPNAME=nvim-Orhun nvim "$@" ;;
      "primeagen")      NVIM_APPNAME=nvim-Primeagen nvim "$@" ;;
      "rafi")           NVIM_APPNAME=nvim-Rafi nvim "$@" ;;
      "rnvim")          NVIM_APPNAME=nvim-RNvim nvim "$@" ;;
      "roiz")           NVIM_APPNAME=nvim-Roiz nvim "$@" ;;
      "seniormars")     NVIM_APPNAME=nvim-SeniorMars nvim "$@" ;;
      "simple")         NVIM_APPNAME=nvim-Simple nvim "$@" ;;
      "slydragonn")     NVIM_APPNAME=nvim-Slydragonn nvim "$@" ;;
      "spider")         NVIM_APPNAME=nvim-Spider nvim "$@" ;;
      "traap")          NVIM_APPNAME=nvim-Traap nvim "$@" ;;
      "vimacs")         NVIM_APPNAME=nvim-Vimacs nvim "$@" ;;
      "wuelner")        NVIM_APPNAME=nvim-Wuelner nvim "$@" ;;
      "xero")           NVIM_APPNAME=nvim-xero nvim "$@" ;;
      "xiao")           NVIM_APPNAME=nvim-Xiao nvim "$@" ;;
      
      # Starter configurations
      "astronvimstart") NVIM_APPNAME=nvim-AstroNvimStart nvim "$@" ;;
      "barebones")      NVIM_APPNAME=nvim-Barebones nvim "$@" ;;
      "basic")          NVIM_APPNAME=nvim-Basic nvim "$@" ;;
      "codeart")        NVIM_APPNAME=nvim-CodeArt nvim "$@" ;;
      "cosmic")         NVIM_APPNAME=nvim-Cosmic nvim "$@" ;;
      "ember")          NVIM_APPNAME=nvim-Ember nvim "$@" ;;
      "fennel")         NVIM_APPNAME=nvim-Fennel nvim "$@" ;;
      "hardhacker")     NVIM_APPNAME=nvim-HardHacker nvim "$@" ;;
      "justinohmy")     NVIM_APPNAME=nvim-JustinOhMy nvim "$@" ;;
      "kickstart")      NVIM_APPNAME=nvim-Kickstart nvim "$@" ;;
      "kickstartpython") NVIM_APPNAME=nvim-KickstartPython nvim "$@" ;;
      "kabin")          NVIM_APPNAME=nvim-Kabin nvim "$@" ;;
      "micah")          NVIM_APPNAME=nvim-Micah nvim "$@" ;;
      "modern")         NVIM_APPNAME=nvim-Modern nvim "$@" ;;
      "normal")         NVIM_APPNAME=nvim-Normal nvim "$@" ;;
      "nvim2k")         NVIM_APPNAME=nvim-2k nvim "$@" ;;
      "nvpak")          NVIM_APPNAME=nvim-NvPak nvim "$@" ;;
      "pde")            NVIM_APPNAME=nvim-pde nvim "$@" ;;
      "rohit")          NVIM_APPNAME=nvim-Rohit nvim "$@" ;;
      "scratch")        NVIM_APPNAME=nvim-Scratch nvim "$@" ;;
      "singlefile")     NVIM_APPNAME=nvim-SingleFile nvim "$@" ;;
      
      # VonHeikemen starters
      "basiclsp")       NVIM_APPNAME=nvim-BasicLsp nvim "$@" ;;
      "basicmason")     NVIM_APPNAME=nvim-BasicMason nvim "$@" ;;
      "extralight")     NVIM_APPNAME=nvim-Extralight nvim "$@" ;;
      "lspcmp")         NVIM_APPNAME=nvim-LspCmp nvim "$@" ;;
      "minimal")        NVIM_APPNAME=nvim-Minimal nvim "$@" ;;
      "modular")        NVIM_APPNAME=nvim-Modular nvim "$@" ;;
      "opinion")        NVIM_APPNAME=nvim-Opinion nvim "$@" ;;
      "startbase")      NVIM_APPNAME=nvim-StartBase nvim "$@" ;;
      "startlsp")       NVIM_APPNAME=nvim-StartLsp nvim "$@" ;;
      "startmason")     NVIM_APPNAME=nvim-StartMason nvim "$@" ;;
      
      # Special
      "lazyman")        NVIM_APPNAME=nvim-Lazyman nvim "$@" ;;
      
      *)
        echo "‚ùå Unknown configuration: $config"
        echo "Run 'nvim-switch' without arguments to see available configs"
        return 1
        ;;
    esac
  }
  
  # List installed configurations
  nvim-list() {
    echo "üìÅ Installed Neovim configurations:"
    local config_base="$HOME/.config"
    local base_configs=("nvim" "nvim-Abstract" "nvim-AstroNvimPlus" "nvim-BasicIde" "nvim-Ecovim" 
                       "nvim-LazyVim" "nvim-LunarVim" "nvim-MagicVim" "nvim-NvChad" "nvim-SpaceVim")
    local lang_configs=("nvim-AlanVim" "nvim-Allaman" "nvim-CatNvim" "nvim-Cpp" "nvim-Go" "nvim-Go2one"
                       "nvim-Insis" "nvim-Knvim" "nvim-LaTeX" "nvim-LazyIde" "nvim-LunarIde" "nvim-LvimIde"
                       "nvim-Magidc" "nvim-Nv" "nvim-NV-IDE" "nvim-Orange" "nvim-Python" "nvim-Rust"
                       "nvim-SaleVim" "nvim-Shuvro" "nvim-Webdev")
    local personal_configs=("nvim-Adib" "nvim-Ahsan" "nvim-Artur" "nvim-Beethoven" "nvim-Brain" "nvim-Charles"
                           "nvim-Chokerman" "nvim-Craftzdog" "nvim-Dillon" "nvim-Elianiva" "nvim-Elijah"
                           "nvim-Enrique" "nvim-Heiker" "nvim-J4de" "nvim-Jdhao" "nvim-Josean" "nvim-JustinNvim"
                           "nvim-Kodo" "nvim-Kristijan" "nvim-LamarVim" "nvim-Maddison" "nvim-Metis" "nvim-Mini"
                           "nvim-OnMyWay" "nvim-ONNO" "nvim-Optixal" "nvim-Orhun" "nvim-Primeagen" "nvim-Rafi"
                           "nvim-RNvim" "nvim-Roiz" "nvim-SeniorMars" "nvim-Simple" "nvim-Slydragonn" "nvim-Spider"
                           "nvim-Traap" "nvim-Vimacs" "nvim-Wuelner" "nvim-xero" "nvim-Xiao")
    local starter_configs=("nvim-AstroNvimStart" "nvim-Barebones" "nvim-Basic" "nvim-CodeArt" "nvim-Cosmic"
                          "nvim-Ember" "nvim-Fennel" "nvim-HardHacker" "nvim-JustinOhMy" "nvim-Kickstart"
                          "nvim-KickstartPython" "nvim-Kabin" "nvim-Micah" "nvim-Modern" "nvim-Normal"
                          "nvim-2k" "nvim-NvPak" "nvim-pde" "nvim-Rohit" "nvim-Scratch" "nvim-SingleFile")
    local vonheikemen_configs=("nvim-BasicLsp" "nvim-BasicMason" "nvim-Extralight" "nvim-LspCmp" "nvim-Minimal"
                              "nvim-Modular" "nvim-Opinion" "nvim-StartBase" "nvim-StartLsp" "nvim-StartMason")
    local special_configs=("nvim-Lazyman")
    
    echo ""
    echo "üîµ Base Configurations:"
    for config in "${base_configs[@]}"; do
      local config_path="$config_base/$config"
      if [[ -d "$config_path" ]]; then
        local size=$(du -sh "$config_path" 2>/dev/null | cut -f1)
        echo "  ‚úÖ $config - $size"
      else
        echo "  ‚ùå $config (not installed)"
      fi
    done
    
    echo ""
    echo "üî¥ Language Configurations:"
    for config in "${lang_configs[@]}"; do
      local config_path="$config_base/$config"
      if [[ -d "$config_path" ]]; then
        local size=$(du -sh "$config_path" 2>/dev/null | cut -f1)
        echo "  ‚úÖ $config - $size"
      else
        echo "  ‚ùå $config (not installed)"
      fi
    done
    
    echo ""
    echo "üü° Personal Configurations:"
    for config in "${personal_configs[@]}"; do
      local config_path="$config_base/$config"
      if [[ -d "$config_path" ]]; then
        local size=$(du -sh "$config_path" 2>/dev/null | cut -f1)
        echo "  ‚úÖ $config - $size"
      else
        echo "  ‚ùå $config (not installed)"
      fi
    done
    
    echo ""
    echo "üü¢ Starter Configurations:"
    for config in "${starter_configs[@]}"; do
      local config_path="$config_base/$config"
      if [[ -d "$config_path" ]]; then
        local size=$(du -sh "$config_path" 2>/dev/null | cut -f1)
        echo "  ‚úÖ $config - $size"
      else
        echo "  ‚ùå $config (not installed)"
      fi
    done
    
    echo ""
    echo "üü£ VonHeikemen Starters:"
    for config in "${vonheikemen_configs[@]}"; do
      local config_path="$config_base/$config"
      if [[ -d "$config_path" ]]; then
        local size=$(du -sh "$config_path" 2>/dev/null | cut -f1)
        echo "  ‚úÖ $config - $size"
      else
        echo "  ‚ùå $config (not installed)"
      fi
    done
    
    echo ""
    echo "üéÜ Special Configurations:"
    for config in "${special_configs[@]}"; do
      local config_path="$config_base/$config"
      if [[ -d "$config_path" ]]; then
        local size=$(du -sh "$config_path" 2>/dev/null | cut -f1)
        echo "  ‚úÖ $config - $size"
      else
        echo "  ‚ùå $config (not installed)"
      fi
    done
  }
  
  # Quick configuration backup
  nvim-backup() {
    local config="${1:-nvim}"
    # Handle both nvim-ConfigName and ConfigName formats
    [[ "$config" != nvim-* ]] && [[ "$config" != "nvim" ]] && config="nvim-$config"
    local config_path="$HOME/.config/$config"
    local backup_path="$HOME/.config/$config.backup.$(date +%Y%m%d_%H%M%S)"
    
    [[ ! -d "$config_path" ]] && { echo "‚ùå Configuration $config not found"; return 1; }
    
    cp -r "$config_path" "$backup_path"
    echo "üíæ Configuration '$config' backed up to: $backup_path"
  }
  
  # Interactive configuration selector using fzf (if available)
  if command -v fzf &>/dev/null; then
    nvim-fzf() {
      local configs=("default" "lazyman")
      # Add all configurations to the fzf list
      configs+=("abstract" "astronvimplus" "basicide" "ecovim" "lazyvim" "lunarvim" "magicvim" "nvchad" "spacevim")
      configs+=("alanvim" "allaman" "catnvim" "cppvim" "govim" "go2one" "insis" "knvim" "latexvim" "lazyide")
      configs+=("lunaride" "lvimide" "magidc" "nvlang" "nv-ide" "orange" "pythonvim" "rustvim" "salevim" "shuvro" "webdev")
      configs+=("adib" "ahsan" "artur" "beethoven" "brain" "charles" "chokerman" "craftzdog" "dillon" "elianiva")
      configs+=("elijah" "enrique" "heiker" "j4de" "jdhao" "josean" "justinnvim" "kodo" "kristijan" "lamarvim")
      configs+=("maddison" "metis" "mini" "onmyway" "onno" "optixal" "orhun" "primeagen" "rafi" "rnvim")
      configs+=("roiz" "seniormars" "simple" "slydragonn" "spider" "traap" "vimacs" "wuelner" "xero" "xiao")
      configs+=("astronvimstart" "barebones" "basic" "codeart" "cosmic" "ember" "fennel" "hardhacker" "justinohmy")
      configs+=("kickstart" "kickstartpython" "kabin" "micah" "modern" "normal" "nvim2k" "nvpak" "pde" "rohit" "scratch" "singlefile")
      configs+=("basiclsp" "basicmason" "extralight" "lspcmp" "minimal" "modular" "opinion" "startbase" "startlsp" "startmason")
      
      local selected
      selected=$(printf "%s\n" "${configs[@]}" | fzf --prompt="üéÜ Select Neovim config: " --height=40% --border --preview="echo 'Launch Neovim with {} configuration'")
      [[ -n "$selected" ]] && nvim-switch "$selected" "$@"
    }
    alias nv-select='nvim-fzf'
  fi
  
  # Lazyman integration helpers (if lazyman is installed)
  if command -v lazyman &>/dev/null; then
    # Install missing configurations
    nvim-install() {
      local category="$1"
      echo "üöÄ Installing Neovim configurations..."
      case "$category" in
        "base"|"B")      lazyman -B ;;
        "language"|"L") lazyman -L all ;;
        "personal"|"W") lazyman -W ;;
        "starter"|"X")  lazyman -X ;;
        "all"|"A")      lazyman -A ;;
        *)
          echo "Usage: nvim-install [base|language|personal|starter|all]"
          echo "  base     - Install all base configurations"
          echo "  language - Install all language configurations"
          echo "  personal - Install all personal configurations"
          echo "  starter  - Install all starter configurations"
          echo "  all      - Install all supported configurations"
          return 1
          ;;
      esac
    }
    
    # Update configurations
    nvim-update() {
      local config="${1:-all}"
      if [[ "$config" == "all" ]]; then
        echo "üîÑ Updating all configurations..."
        lazyman -U -A
      else
        # Handle both nvim-ConfigName and ConfigName formats
        [[ "$config" != nvim-* ]] && [[ "$config" != "nvim" ]] && config="nvim-$config"
        echo "üîÑ Updating $config..."
        lazyman -U -N "$config"
      fi
    }
    
    # Remove configurations
    nvim-remove() {
      local config="$1"
      [[ -z "$config" ]] && { echo "Usage: nvim-remove <config_name>"; return 1; }
      # Handle both nvim-ConfigName and ConfigName formats
      [[ "$config" != nvim-* ]] && [[ "$config" != "nvim" ]] && config="nvim-$config"
      echo "üóëÔ∏è Removing $config..."
      lazyman -N "$config" -r
    }
  else
    echo "üìù Note: Install lazyman for enhanced Neovim configuration management:"
    echo "    git clone https://github.com/doctorfree/nvim-lazyman \$HOME/.config/nvim-Lazyman"
    echo "    \$HOME/.config/nvim-Lazyman/lazyman.sh"
  fi
fi

# ----------------------------------------------------------------------------
# Quick Utilities & Shortcuts
# ----------------------------------------------------------------------------

# URL tools
open-url() {
  [[ -z "$1" ]] && { echo "Usage: open-url <url>" >&2; return 1; }
  local url="$1"
  [[ ! "$url" =~ ^https?:// ]] && url="https://$url"
  
  if command -v xdg-open &>/dev/null; then
    xdg-open "$url"
  else
    echo "URL: $url (no browser opener found)"
  fi
}

# Alias suggestions based on command usage
alias-suggest() {
  echo "üîç Most used commands (potential aliases):"
  history | awk '{print $2}' | sort | uniq -c | sort -rn | head -10 | awk '{printf "  %s\t(used %d times)\n", $2, $1}'
}

# Quick file server for sharing
serve-here() {
  local port="${1:-8080}"
  local ip
  ip=$(hostname -I | awk '{print $1}')
  echo "üì° Serving current directory at http://$ip:$port"
  echo "üîó Press Ctrl+C to stop"
  python3 -m http.server "$port"
}

# Enhanced clipboard operations (cross-platform)
clip() {
  if command -v xclip &>/dev/null; then
    xclip -selection clipboard
  elif command -v xsel &>/dev/null; then
    xsel --clipboard --input
  elif command -v wl-copy &>/dev/null; then
    wl-copy
  else
    echo "‚ùå No clipboard tool found"
    return 1
  fi
  echo "üìã Content copied to clipboard"
}

# ----------------------------------------------------------------------------

# Module loaded successfully
return 0
