#!/usr/bin/env bash
# ========================
# General Functions
# ========================

# Create a directory and navigate to it
mkcd() {
    if [ -z "$1" ]; then
        echo "Usage: mkcd <directory>"
        return 1
    fi
    mkdir -p "$1" && cd "$1"
}

# Navigate to a directory matching a pattern
cdf() {
    if [ -z "$1" ]; then
        echo "Usage: cdf <pattern>"
        return 1
    fi
    local dir
    dir=$(find . -maxdepth 1 -type d -name "*$1*" | head -n 1)
    if [ -n "$dir" ]; then
        cd "$dir" || return 1
    else
        echo "No directory matching pattern '$1' found."
        return 1
    fi
}

# Extract wisdom from YouTube transcripts (requires yt and fabric)
ytt() {
    if [ -z "$1" ]; then
        echo "Usage: ytt <youtube_link>"
        return 1
    fi
    # Check if required commands are installed
    if ! command -v yt &>/dev/null || ! command -v fabric &>/dev/null; then
        echo "Error: Both 'yt' and 'fabric' must be installed."
        return 1
    fi
    local transcript
    transcript=$(yt --transcript "$1")
    echo "$transcript" | fabric --stream --pattern extract_wisdom
}

# Extract various archive formats
extract() {
    if [[ -z "$1" || "$1" == "-h" || "$1" == "--help" ]]; then
        echo "Usage: extract <archive> [directory]"
        echo "Supports: tar.bz2, tar.gz, tar.xz, bz2, gz, zip, rar, 7z, etc."
        return 0
    fi

    if [ ! -f "$1" ]; then
        echo "File '$1' not found."
        return 1
    fi

    # If a destination directory is provided
    if [[ -n "$2" ]]; then
        mkdir -p "$2"
        cd "$2" || return 1
    fi

    case "$1" in
        *.tar.bz2|*.tbz2|*.tbz) tar xvjf "$1" ;;
        *.tar.gz|*.tgz) tar xvzf "$1" ;;
        *.tar.xz) tar xvJf "$1" ;;
        *.tar) tar xvf "$1" ;;
        *.zip) unzip "$1" ;;
        *.rar) unrar x "$1" ;;
        *.7z) 7z x "$1" ;;
        *.gz) gunzip "$1" ;;
        *.bz2) bunzip2 "$1" ;;
        *.xz|*.txz|*.lzma|*.tlz) xz -d "$1" ;;
        *) echo "Unsupported file type: $1" ;;
    esac

    # Return to original directory if a destination was provided
    if [[ -n "$2" ]]; then
        cd - || return 1
    fi
}

# ========================
# Yazi File Manager
# ========================

# Main alias for yazi file manager
alias y='yazi'

# Open yazi in the current directory
alias ya='yazi .'

# Open yazi and navigate to home directory
alias yh='yazi ~'

# Open yazi in downloads folder
alias yd='yazi ~/Downloads'

# Function to navigate to a directory and then open yazi
cdz() {
    if [ -z "$1" ]; then
        yazi .
    else
        cd "$1" && yazi .
    fi
}

# Function to open yazi in a directory, and cd to that directory when exiting yazi
function ycd() {
    tmp="$(mktemp -t "yazi-cwd.XXXXX")"
    yazi --cwd-file="$tmp" "$@"
    if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
        cd -- "$cwd"
    fi
    rm -f -- "$tmp"
}

# ========================
# File Management
# ========================

# Enhanced file management aliases
alias cp="rsync -avhW --no-compress --progress"  # Use rsync for copying with progress
alias mkdir='mkdir -pv'                          # Verbose mkdir with parent directories

# Use eza if available, otherwise fall back to ls with color
if command -v eza >/dev/null 2>&1; then
    alias ls='eza -a --icons'
    alias ll='eza -al --icons'
    alias lt='eza -a --tree --level=1 --icons'
    alias la='eza -la --icons'
    alias lm='eza -la --sort=modified --icons'
    alias lS='eza -la --sort=size --icons'
else
    alias ls="ls --color=auto"      # Colorize ls output
    alias ll="ls -la --color=auto"  # Detailed list including hidden files
    alias l.="ls -d .* --color=auto" # List hidden files only
    alias la="ls -la --color=auto"  # List all files
    alias lm="ls -la --color=auto -t" # List by modified time
    alias lS="ls -la --color=auto -S" # List by size
fi

# Use fd instead of find if available
if command -v fd >/dev/null 2>&1; then
    alias findr='fd'  # Using fd as a faster alternative to find
fi

# Function to search files for text (combining find and grep)
ftext() {
    if [ $# -eq 0 ]; then
        echo "Usage: ftext <search_pattern> [path]"
        return 1
    fi
    
    local pattern=$1
    local path=${2:-.}
    
    # Check if ripgrep is available
    if command -v rg &>/dev/null; then
        rg --color=always --line-number --smart-case "$pattern" "$path"
    else
        grep -r --color=always -n "$pattern" "$path"
    fi
}

# Function to find directories by name pattern
fdir() {
    if [ -z "$1" ]; then
        echo "Usage: fdir <pattern> [max_depth]"
        return 1
    fi
    
    local pattern=$1
    local depth=${2:-3}  # Default depth is 3 levels
    
    find . -maxdepth "$depth" -type d -name "*$pattern*" | sort
}

# ========================
# System Management
# ========================

alias please="sudo !!"                           # Run the last command with sudo
alias h="history"                                # Show command history
alias j="jobs -l"                                # List active jobs
alias reload="exec ${SHELL} -l"                  # Reload the shell
alias meminfo="free -m -l -t"                    # Show memory usage
alias psmem="ps auxf | sort -nr -k 4 | head -10" # Top memory consumers
alias pscpu="ps auxf | sort -nr -k 3 | head -10" # Top CPU consumers
alias cpuinfo="lscpu"                            # Display CPU info
alias ports="netstat -tulanp"                    # List open ports
alias lsport="sudo lsof -i"                      # List processes using ports
alias ip="dig +short myip.opendns.com @resolver1.opendns.com" # Get public IP
alias localip="hostname -I | awk '{print \$1}'"  # Get local IP

# Add a function to generate summaries of a directory
dirsummary() {
    local dir=${1:-.}
    
    echo "üìÇ Directory Summary for: $(realpath "$dir")"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    echo "üìä Stats:"
    echo "  Total items: $(find "$dir" -type f -o -type d | wc -l)"
    echo "  Files: $(find "$dir" -type f | wc -l)"
    echo "  Directories: $(find "$dir" -type d | wc -l)"
    echo "  Total size: $(du -sh "$dir" | cut -f1)"
    
    echo -e "\nüìë File types:"
    find "$dir" -type f | grep -v "^\." | grep -o "\.[^\.]*$" | sort | uniq -c | sort -rn | head -10
    
    echo -e "\nüïí Recently modified files:"
    find "$dir" -type f -mtime -7 | head -5
    
    echo -e "\nüìÅ Largest subdirectories:"
    du -h --max-depth=1 "$dir" | sort -hr | head -5
}

# ========================
# Networking
# ========================

alias nmap_open_ports="nmap --open"
alias nmap_list_interfaces="nmap --iflist"
alias nmap_slow="sudo nmap -sS -v -T1"
alias nmap_fin="sudo nmap -sF -v"
alias nmap_fast="nmap -F -T5 --version-light --top-ports 300"
alias nmap_full="sudo nmap -sS -T4 -PE -PP -PS80,443 -PY -g 53 -A -p1-65535 -v"

# Function to quickly share a file or directory via HTTP
share() {
    local port=${2:-8000}  # Default port 8000
    
    if [ -z "$1" ]; then
        echo "Usage: share <file_or_directory> [port]"
        echo "Starts a simple HTTP server to share a file or directory."
        return 1
    fi
    
    # Check if the path exists
    if [ ! -e "$1" ]; then
        echo "Error: $1 does not exist."
        return 1
    fi
    
    # Get local IP for easier sharing
    local ip
    ip=$(hostname -I | awk '{print $1}')
    
    # Check if path is a directory
    if [ -d "$1" ]; then
        # For directories, serve the whole directory
        echo "Sharing directory at http://$ip:$port/"
        (cd "$1" && python3 -m http.server "$port")
    else
        # For files, create a temporary directory
        local temp_dir=$(mktemp -d)
        local filename=$(basename "$1")
        cp "$1" "$temp_dir"
        
        echo "Sharing $filename at http://$ip:$port/$filename"
        (cd "$temp_dir" && python3 -m http.server "$port")
        
        # Clean up when done
        rm -rf "$temp_dir"
    fi
}

# ========================
# Media & Downloads
# ========================

alias ytmp3="youtube-dl --extract-audio --audio-format mp3"
alias ytmp4="youtube-dl -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4'"
alias wget='wget --no-hsts -c'                   # Continue downloads and prevent .wget-hsts file creation
alias get='wget -m -np -c -R "index.html*"'      # Recursive website download
alias playmp3='for i in *.mp3; do mplayer "$i"; done' # Play all MP3s in the directory
alias music="mplayer --shuffle *"                # Shuffle and play media files

# ========================
# Navigation
# ========================

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ~="cd ~"           # Go to home directory
alias dl="cd ~/Downloads" # Go to Downloads directory
alias dt="cd ~/Desktop"   # Go to Desktop directory
alias p="cd ~/projects"   # Go to projects directory
alias doc="cd ~/Documents" # Go to Documents directory

# ========================
# Git and Development
# ========================

alias code="flatpak run com.visualstudio.code"  # Launch VS Code
alias studio="flatpak run com.visualstudio.code"# Alias for VS Code

# Git aliases with improved functionality
alias gitstatus="git status -s"
alias gita="git add -A"
alias gitcm="git commit -m"
alias gitp="git push"
alias gitpl="git pull"
alias gitf="git fetch"
alias gits="git stash"
alias gitsp="git stash pop"
alias gitb="git branch"
alias gitco="git checkout"
alias gitcb="git checkout -b"    # Create and checkout a new branch
alias gri="git rebase -i"        # Interactive rebase
alias glog="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit" # Better git log
alias gitclean="git clean -fd"   # Remove untracked files and directories

# Improved quickgit function with commit message verification
quickgit() {
    if [ -z "$1" ]; then
        echo "Usage: quickgit <commit message>"
        echo "Stages all changes, commits with the provided message, and pushes to the remote repository."
        return 1
    fi
    
    # Show what's being staged
    git status -s
    echo "Staging all changes..."
    git add .
    
    # Commit with the provided message
    echo "Committing with message: $*"
    git commit -m "$*"
    
    # Check if there's a remote repository
    if git remote | grep -q .; then
        # Push to the remote repository
        echo "Pushing to remote..."
        git push
    else
        echo "No remote repository configured. Skipping push."
    fi
}

# Git workflow - update branch with latest from upstream
gitupdate() {
    local current_branch
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    
    echo "Updating branch: $current_branch"
    
    # Stash any changes
    if ! git diff --quiet; then
        echo "Stashing local changes..."
        git stash
        local stashed=true
    fi
    
    # Fetch updates
    echo "Fetching latest changes..."
    git fetch
    
    # Check if there are upstream changes for the current branch
    if git rev-parse --verify origin/$current_branch >/dev/null 2>&1; then
        # Rebase on top of upstream changes
        echo "Rebasing on origin/$current_branch..."
        git rebase origin/$current_branch
    else
        echo "No upstream branch found for $current_branch"
    fi
    
    # Pop stashed changes if any
    if [ "$stashed" = true ]; then
        echo "Applying stashed changes..."
        git stash pop
    fi
    
    echo "Update complete!"
}

# Function to create a new script, make it executable, and open it in your editor
mkscript() {
    if [ -z "$1" ]; then
        echo "Usage: mkscript <script_name>"
        return 1
    fi
    
    # Add .sh extension if not provided
    [[ "$1" != *.* ]] && FILE="$1.sh" || FILE="$1"
    
    # Create the file with a bash shebang
    echo '#!/usr/bin/env bash' > "$FILE"
    echo '' >> "$FILE"
    echo '# Created on: '"$(date)" >> "$FILE"
    echo '# Description: ' >> "$FILE"
    echo '' >> "$FILE"
    echo 'set -euo pipefail  # Exit on error, undefined vars, and pipe failures' >> "$FILE"
    echo '' >> "$FILE"
    echo '# Main script body' >> "$FILE"
    echo 'main() {' >> "$FILE"
    echo '    echo "Hello, World!"' >> "$FILE"
    echo '}' >> "$FILE"
    echo '' >> "$FILE"
    echo 'main "$@"' >> "$FILE"
    
    # Make it executable
    chmod +x "$FILE"
    
    # Open in preferred editor (using nvim if available, else fallback)
    if command -v nvim &>/dev/null; then
        nvim "$FILE"
    elif command -v code &>/dev/null; then
        code "$FILE"
    else
        $EDITOR "$FILE"
    fi
}

# ========================
# Fun and Miscellaneous
# ========================

alias neofetch="neofetch | lolcat"
alias lweather="ansiweather -l minto ontario"  # Weather for Minto, Ontario
alias now="date +%T"                           # Display current time
alias week="date +%V"                          # Display current week number
alias chx="chmod +x"                           # Make a script executable
alias :q="exit"                                # Vim-style exit
alias today='date "+%Y-%m-%d"'                # Show today's date in ISO format

# ========================
# Tmux Shortcuts
# ========================

alias ta="tmux attach -t"
alias ts="tmux new-session -s"
alias tl="tmux list-sessions"
alias tk="tmux kill-session -t"                # Kill a tmux session
alias tn="tmux new -s"                         # Create a new session with name
alias tsw="tmux switch-client -t"              # Switch client to session

# ========================
# Miscellaneous Tools
# ========================

alias bc="bc -l"                               # Calculator with math lib
alias sha1="openssl sha1"                      # Generate SHA1 digest
alias sha256="openssl sha256"                  # Generate SHA256 digest
alias md5="openssl md5"                        # Generate MD5 digest
alias flushmcd='echo "flush_all" | nc 10.10.27.11 11211'  # Flush Memcached
alias vnstat="vnstat -i eth1"                  # Network usage statistics
alias df="df -h"                               # Human-readable disk usage
alias du="du -h"                               # Human-readable directory size

# ========================
# Default Applications
# ========================

alias browser="google-chrome-stable"
alias vlc="flatpak run org.videolan.VLC"
alias spotify="flatpak run com.spotify.Client"
alias discord="flatpak run com.discordapp.Discord"
alias teams="flatpak run com.microsoft.Teams"

# ========================
# Custom Commands
# ========================

alias loo="| lolcat"           # Pipe outputs to lolcat
alias grep="grep --color=auto" # Colorize grep output
alias fd="fd --color=auto"     # Colorize fd output
alias diff="diff --color=auto" # Colorize diff output

# Improved updateall function with error handling and progress tracking
updateall() {
    echo "üöÄ Starting comprehensive system update..."
    
    # Track overall success
    local success=true
    local failed_managers=()
    
    # Function to handle updating with proper error handling
    update_with() {
        local manager=$1
        local cmd=$2
        local description=$3
        
        echo ""
        echo "üì¶ Updating $description..."
        echo "Running: $cmd"
        
        if eval "$cmd"; then
            echo "‚úÖ Successfully updated $description"
        else
            echo "‚ùå Failed to update $description"
            success=false
            failed_managers+=("$description")
        fi
    }
    
    # Determine Linux distribution
    local distro=""
    if [ -f /etc/os-release ]; then
        distro=$(grep -oP '(?<=^ID=).+' /etc/os-release | tr -d '"')
    fi
    
    echo "üñ•Ô∏è Detected distribution: $distro"
    
    # System package manager updates
    case "$distro" in
        alpine)
            update_with "apk" "sudo apk update && sudo apk upgrade" "Alpine packages"
            ;;
        debian|ubuntu|pop|mint|kali|elementary|zorin)
            update_with "apt" "sudo apt update && sudo apt upgrade -y" "Debian/Ubuntu packages"
            # Check for dist-upgrade capabilities
            if apt --help 2>&1 | grep -q dist-upgrade; then
                update_with "apt" "sudo apt dist-upgrade -y" "Distribution packages"
            fi
            # Clean up
            update_with "apt" "sudo apt autoremove -y && sudo apt autoclean" "package cleanup"
            ;;
        fedora|rhel|centos|rocky|alma)
            if command -v dnf >/dev/null 2>&1; then
                update_with "dnf" "sudo dnf upgrade --refresh -y" "DNF packages"
                update_with "dnf" "sudo dnf autoremove -y" "DNF cleanup"
            else
                update_with "yum" "sudo yum update -y" "YUM packages"
                update_with "yum" "sudo yum autoremove -y" "YUM cleanup"
            fi
            ;;
        arch|manjaro|endeavouros|garuda)
            update_with "pacman" "sudo pacman -Syu --noconfirm" "Arch packages"
            # Clean package cache but keep the most recent version
            update_with "pacman" "sudo paccache -rk1" "Arch package cache"
            ;;
        opensuse*|suse*)
            update_with "zypper" "sudo zypper refresh && sudo zypper update -y" "openSUSE packages"
            ;;
        *)
            # Try to detect package manager if distribution couldn't be identified
            if command -v pacman >/dev/null 2>&1; then
                update_with "pacman" "sudo pacman -Syu --noconfirm" "Arch packages"
            elif command -v apt >/dev/null 2>&1; then
                update_with "apt" "sudo apt update && sudo apt upgrade -y" "Debian/Ubuntu packages"
            elif command -v dnf >/dev/null 2>&1; then
                update_with "dnf" "sudo dnf upgrade --refresh -y" "DNF packages"
            elif command -v zypper >/dev/null 2>&1; then
                update_with "zypper" "sudo zypper refresh && sudo zypper update -y" "openSUSE packages"
            elif command -v apk >/dev/null 2>&1; then
                update_with "apk" "sudo apk update && sudo apk upgrade" "Alpine packages"
            else
                echo "‚ö†Ô∏è Unknown distribution and no recognized package manager found."
            fi
            ;;
    esac
    
    # Alternative package managers
    
    # Update AUR packages if yay is installed
    if command -v yay >/dev/null 2>&1; then
        update_with "yay" "yay -Syu --noconfirm" "AUR packages"
    fi
    
    # Update Flatpak if available
    if command -v flatpak >/dev/null 2>&1; then
        update_with "flatpak" "flatpak update -y" "Flatpak packages"
    fi
    
    # Update Snap if available
    if command -v snap >/dev/null 2>&1; then
        update_with "snap" "sudo snap refresh" "Snap packages"
    fi
    
    # Update Homebrew if available
    if command -v brew >/dev/null 2>&1; then
        update_with "brew" "brew update && brew upgrade && brew cleanup" "Homebrew packages"
    fi
    
    # Update ZimFW if available
    if command -v zimfw >/dev/null 2>&1; then
        update_with "zimfw" "zimfw update" "ZimFW"
    fi
    
    # Update Oh My Posh if available
    if command -v oh-my-posh >/dev/null 2>&1; then
        update_with "oh-my-posh" "sudo oh-my-posh update" "Oh My Posh"
    fi
    
    # Update Rust if installed
    if command -v rustup >/dev/null 2>&1; then
        update_with "rustup" "rustup update" "Rust"
    fi
    
    # Update npm global packages if available
    if command -v npm >/dev/null 2>&1; then
        update_with "npm" "npm update -g" "npm global packages"
    fi
    
    # Update pip packages if available (user-installed only)
    if command -v pip >/dev/null 2>&1; then
        update_with "pip" "pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1 | xargs -r pip install -U --user" "pip user packages"
    fi
    
    # Final report
    echo ""
    if [ "$success" = true ]; then
        echo "üéâ All updates completed successfully!"
    else
        echo "‚ö†Ô∏è Some updates failed. The following managers had issues:"
        for manager in "${failed_managers[@]}"; do
            echo "  - $manager"
        done
        echo "You may want to run those updates manually."
    fi
    
    # Show system information
    echo ""
    echo "üìä System Information:"
    echo "  - Kernel: $(uname -r)"
    echo "  - Uptime: $(uptime -p)"
    if command -v free >/dev/null 2>&1; then
        echo "  - Memory: $(free -h | awk '/^Mem:/ {print $3 " used of " $2 " total"}')"
    fi
    if command -v df >/dev/null 2>&1; then
        echo "  - Disk: $(df -h / | awk 'NR==2 {print $3 " used of " $2 " total (" $5 " used)"}')"
    fi
}

# New functions for Christitus installers
christitus() {
    curl -fsSL christitus.com/linux | sh
}

christitusdev() {
    curl -fsSL https://christitus.com/linuxdev | sh
}

# Shell management
alias zimupdate="zimfw update"
alias reload-zsh="source ~/.zshrc"
alias edit-zsh="nvim ~/.zshrc"
alias edit-aliases="nvim ~/.aliases"

# Install a package using the custom install script
pkg-install() {
    if [ -z "$1" ]; then
        echo "Usage: pkg-install <package> [--verbose]"
        return 1
    fi
    
    if [ -f ~/install.sh ]; then
        ~/install.sh "$@"
    else
        echo "Error: install.sh script not found in home directory."
        return 1
    fi
}

# Quick temperature check for systems with sensors
tempcheck() {
    if command -v sensors >/dev/null 2>&1; then
        sensors | grep -E 'Core|CPU'
    else
        echo "The 'sensors' command is not available. Try installing lm-sensors package."
    fi
}

# Generate a secure password
genpass() {
    local length=${1:-16}
    if [[ ! "$length" =~ ^[0-9]+$ ]] || [ "$length" -lt 8 ]; then
        echo "Please specify a valid password length (minimum 8)"
        return 1
    fi
    
    if command -v openssl >/dev/null 2>&1; then
        openssl rand -base64 48 | cut -c1-"$length"
    else
        tr -dc 'A-Za-z0-9!@#$%^&*()-_=+' < /dev/urandom | head -c "$length"; echo
    fi
}

# Watch system resources (refresh every 2 seconds)
alias syswatch='watch -n2 "free -h; echo; df -h -T /"'

# Enhanced man pages with colors if batcat is available
if command -v batcat >/dev/null 2>&1; then
    export MANPAGER="sh -c 'col -bx | batcat -l man -p'"
    alias man='MANPAGER="sh -c \"col -bx | batcat -l man -p\"" man'
elif command -v bat >/dev/null 2>&1; then
    export MANPAGER="sh -c 'col -bx | bat -l man -p'"
    alias man='MANPAGER="sh -c \"col -bx | bat -l man -p\"" man'
fi