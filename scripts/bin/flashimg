#!/bin/bash

# SCRIPT: flashimg - Flash disk images to storage devices safely
# DESCRIPTION: Automates flashing of .img, .img.bz2, .img.xz, and .iso files to storage devices
#              with interactive drive selection and safety checks
# AUTHOR: ShadowHarvy
# CREATED: 2025-09-28

# --- Set Colors for Output ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# --- Global Variables ---
IMAGE_FILE=""
TARGET_DEVICE=""
TEMP_DIR=""

# --- Cleanup Function ---
cleanup() {
    if [ -n "$TEMP_DIR" ] && [ -d "$TEMP_DIR" ]; then
        echo -e "${BLUE}Cleaning up temporary files...${NC}"
        rm -rf "$TEMP_DIR"
    fi
    
    # Ensure any background processes are killed
    jobs -p | xargs -r kill 2>/dev/null
}

# --- Set trap for cleanup ---
trap cleanup EXIT

# --- Usage Function ---
usage() {
    echo -e "${YELLOW}Usage: $0 <image_file>${NC}"
    echo ""
    echo "Flash disk images to storage devices with interactive drive selection."
    echo ""
    echo "Supported input formats:"
    echo "  - .img     (raw disk image)"
    echo "  - .img.bz2 (bzip2 compressed disk image)"
    echo "  - .img.xz  (xz compressed disk image)"
    echo "  - .iso     (ISO disk image)"
    echo ""
    echo "Examples:"
    echo "  $0 steamdeck-recovery-4.img.bz2"
    echo "  $0 raspios-lite.img.xz"
    echo "  $0 ubuntu-desktop.iso"
    echo "  $0 diskimage.img"
    echo ""
    echo "The script will:"
    echo "  - Show available storage devices"
    echo "  - Ask you to select the target device"
    echo "  - Confirm before writing (DESTRUCTIVE operation)"
    echo "  - Show progress during flashing"
}

# --- Dependency Check Function ---
check_dependencies() {
    local missing_deps=()
    local required_commands=("dd" "lsblk" "bzcat" "xzcat" "cat" "sudo")
    
    for cmd in "${required_commands[@]}"; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            missing_deps+=("$cmd")
        fi
    done
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        echo -e "${RED}Error: Missing required dependencies:${NC}"
        for dep in "${missing_deps[@]}"; do
            echo -e "${RED}  - $dep${NC}"
        done
        echo -e "${YELLOW}Please install missing dependencies and try again.${NC}"
        exit 1
    fi
}

# --- Check Root Privileges ---
check_root() {
    if [ "$EUID" -eq 0 ]; then
        echo -e "${RED}Error: This script should not be run as root directly.${NC}"
        echo -e "${YELLOW}It will use 'sudo' when needed for the dd command.${NC}"
        exit 1
    fi
}

# --- Validate Image File ---
validate_image_file() {
    local file="$1"
    
    # Check if file exists
    if [ ! -f "$file" ]; then
        echo -e "${RED}Error: File '$file' does not exist.${NC}"
        return 1
    fi
    
    # Check if file has correct extension
    case "$file" in
        *.img|*.img.bz2|*.img.xz|*.iso)
            return 0
            ;;
        *)
            echo -e "${RED}Error: File '$file' must have .img, .img.bz2, .img.xz, or .iso extension.${NC}"
            return 1
            ;;
    esac
}

# --- Show Available Drives ---
show_available_drives() {
    echo -e "${BLUE}=== Available Storage Devices ===${NC}"
    echo ""
    
    # Show all block devices excluding loop devices, ram, and mounted root filesystem
    lsblk -d -o NAME,SIZE,MODEL,VENDOR,TRAN -x NAME | grep -E '^sd[a-z]|^nvme[0-9]+n[0-9]+|^mmcblk[0-9]+' | while read -r line; do
        local device_name=$(echo "$line" | awk '{print $1}')
        local device_path="/dev/$device_name"
        
        # Check if device is mounted
        local mount_info=""
        if mount | grep -q "^$device_path"; then
            mount_info=" ${RED}[MOUNTED]${NC}"
        fi
        
        # Check if any partition is mounted
        local part_mounted=""
        if mount | grep -q "^${device_path}[0-9]"; then
            part_mounted=" ${YELLOW}[PARTITIONS MOUNTED]${NC}"
        fi
        
        echo -e "${YELLOW}$line${NC}$mount_info$part_mounted"
    done
    
    echo ""
    echo -e "${RED}⚠️  WARNING: Flashing will COMPLETELY ERASE the target device! ⚠️${NC}"
    echo ""
}

# --- Select Target Device ---
select_target_device() {
    while true; do
        read -p "Enter the device name (e.g., sdb, nvme0n1, mmcblk0): " device_name
        
        if [ -z "$device_name" ]; then
            echo -e "${RED}Error: Device name cannot be empty.${NC}"
            continue
        fi
        
        local device_path="/dev/$device_name"
        
        # Check if device exists
        if [ ! -b "$device_path" ]; then
            echo -e "${RED}Error: Device '$device_path' does not exist.${NC}"
            continue
        fi
        
        # Check if device is a valid target (not a partition)
        if [[ "$device_name" =~ [0-9]$ ]] && [[ ! "$device_name" =~ ^mmcblk[0-9]+$ ]] && [[ ! "$device_name" =~ ^nvme[0-9]+n[0-9]+$ ]]; then
            echo -e "${RED}Error: '$device_name' appears to be a partition, not a device.${NC}"
            echo -e "${YELLOW}Use the main device (e.g., 'sdb' instead of 'sdb1').${NC}"
            continue
        fi
        
        # Show device info
        echo ""
        echo -e "${BLUE}Selected device information:${NC}"
        lsblk -o NAME,SIZE,MODEL,VENDOR,MOUNTPOINT "$device_path" 2>/dev/null || {
            echo -e "${RED}Error: Could not get information for device '$device_path'.${NC}"
            continue
        }
        
        # Check for mounted partitions
        local mounted_parts=$(mount | grep "^${device_path}" | wc -l)
        if [ "$mounted_parts" -gt 0 ]; then
            echo ""
            echo -e "${RED}WARNING: This device has mounted partitions:${NC}"
            mount | grep "^${device_path}" | while read -r mount_line; do
                echo -e "${RED}  $mount_line${NC}"
            done
            echo ""
            read -p "Continue anyway? This will unmount and destroy all data! (y/N): " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                continue
            fi
        fi
        
        TARGET_DEVICE="$device_path"
        break
    done
}

# --- Final Confirmation ---
final_confirmation() {
    echo ""
    echo -e "${RED}╔════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${RED}║                    ⚠️  FINAL WARNING ⚠️                     ║${NC}"
    echo -e "${RED}║                                                            ║${NC}"
    echo -e "${RED}║  This will COMPLETELY ERASE ALL DATA on the target device! ║${NC}"
    echo -e "${RED}║                                                            ║${NC}"
    echo -e "${RED}╚════════════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${YELLOW}Image file: $IMAGE_FILE${NC}"
    echo -e "${YELLOW}Target device: $TARGET_DEVICE${NC}"
    echo ""
    echo -e "${RED}Type 'FLASH' (all caps) to proceed, or anything else to abort:${NC}"
    read -r confirmation
    
    if [ "$confirmation" != "FLASH" ]; then
        echo -e "${GREEN}Operation aborted. No changes made.${NC}"
        exit 0
    fi
}

# --- Unmount Device Partitions ---
unmount_device() {
    local device="$1"
    echo -e "${BLUE}Unmounting any mounted partitions on $device...${NC}"
    
    # Find and unmount all partitions
    mount | grep "^${device}" | awk '{print $1}' | while read -r partition; do
        echo -e "${BLUE}Unmounting $partition...${NC}"
        if ! sudo umount "$partition" 2>/dev/null; then
            echo -e "${YELLOW}Warning: Could not unmount $partition (may not be mounted)${NC}"
        fi
    done
}

# --- Flash Image Function ---
flash_image() {
    local image_file="$1"
    local target_device="$2"
    
    echo -e "${BLUE}=== Starting Flash Operation ===${NC}"
    echo -e "${BLUE}Image: $image_file${NC}"
    echo -e "${BLUE}Target: $target_device${NC}"
    echo ""
    
    # Unmount target device partitions
    unmount_device "$target_device"
    
    # Determine decompression method based on file extension
    local flash_cmd=""
    case "$image_file" in
        *.img.bz2)
            echo -e "${BLUE}Decompressing and flashing .img.bz2 file...${NC}"
            flash_cmd="bzcat \"$image_file\" | sudo dd of=\"$target_device\" oflag=sync status=progress bs=128M"
            ;;
        *.img.xz)
            echo -e "${BLUE}Decompressing and flashing .img.xz file...${NC}"
            flash_cmd="xzcat \"$image_file\" | sudo dd of=\"$target_device\" oflag=sync status=progress bs=128M"
            ;;
        *.img|*.iso)
            echo -e "${BLUE}Flashing raw image file...${NC}"
            flash_cmd="sudo dd if=\"$image_file\" of=\"$target_device\" oflag=sync status=progress bs=128M"
            ;;
    esac
    
    echo -e "${YELLOW}Executing: $flash_cmd${NC}"
    echo ""
    
    # Execute the flash command
    if eval "$flash_cmd"; then
        echo ""
        echo -e "${GREEN}✅ Flash operation completed successfully!${NC}"
        
        # Sync filesystem
        echo -e "${BLUE}Syncing filesystem...${NC}"
        sudo sync
        
        echo -e "${GREEN}✅ All operations completed. Device is ready to use.${NC}"
    else
        echo ""
        echo -e "${RED}❌ Flash operation failed!${NC}"
        return 1
    fi
}

# --- Main Function ---
main() {
    # Check for help flag
    if [[ "$1" == "-h" || "$1" == "--help" ]]; then
        usage
        exit 0
    fi
    
    # Check if image file argument provided
    if [ $# -ne 1 ]; then
        echo -e "${RED}Error: Please provide exactly one image file.${NC}"
        usage
        exit 1
    fi
    
    # Store image file path
    IMAGE_FILE="$1"
    
    # Check dependencies
    check_dependencies
    
    # Check we're not running as root
    check_root
    
    # Validate image file
    if ! validate_image_file "$IMAGE_FILE"; then
        exit 1
    fi
    
    echo -e "${BLUE}=== Disk Image Flasher ===${NC}"
    echo -e "${BLUE}Image file: $IMAGE_FILE${NC}"
    echo ""
    
    # Show available drives
    show_available_drives
    
    # Select target device
    select_target_device
    
    # Final confirmation
    final_confirmation
    
    # Flash the image
    if flash_image "$IMAGE_FILE" "$TARGET_DEVICE"; then
        exit 0
    else
        exit 1
    fi
}

# --- Execute Main Function ---
main "$@"